;***************************************************************************/
; Return the Inverse of a matrix -- this is a specialized invert of a 4x4
; that assumes the 4th column is ( 0, 0, 0, 1 ), derived using cramer's rule.
;***************************************************************************/
; The vu code was generated based on the following "c" code.
;const register float v0x = m[0][0];	const register float v0y = m[0][1];	const register float v0z = m[0][2];
;const register float v1x = m[1][0];	const register float v1y = m[1][1];	const register float v1z = m[1][2];
;const register float v2x = m[2][0];	const register float v2y = m[2][1];	const register float v2z = m[2][2];
;const register float v3x = m[3][0];	const register float v3y = m[3][1];	const register float v3z = m[3][2];
;register float det = v0x*( v1y*v2z - v2y*v1z ) + v0y*( v1z*v2x - v2z*v1x ) + v0z*( v1x*v2y - v2x*v1y )
;det = 1.0f / det;
;r[0][0] =  ( v1y*v2z - v1z*v2y ) * det;
;r[0][1] = -( v0y*v2z - v2y*v0z ) * det;
;r[0][2] =  ( v0y*v1z - v1y*v0z ) * det;
;r[0][3] =  0.0f;
;r[1][0] =  ( v1z*v2x - v2z*v1x) * det;
;r[1][1] = -( v0z*v2x - v0x*v2z ) * det;
;r[1][2] =  ( v0z*v1x - v1z*v0x ) * det;
;r[1][3] =  0.0f;
;r[2][0] =  ( v1x*v2y - v1y*v2x ) * det;
;r[2][1] = -( v0x*v2y - v2x*v0y ) * det;
;r[2][2] =  ( v0x*v1y - v1x*v0y ) * det;
;r[2][3] =  0.0f;
;r[3][0] = -( v1x*( v2y*v3z - v3y*v2z ) + v1y*( v2z*v3x - v3z*v2x ) + v1z*( v2x*v3y - v3x*v2y ) ) * det
;r[3][1] =  ( v0x*( v2y*v3z - v3y*v2z ) + v0y*( v2z*v3x - v3z*v2x ) + v0z*( v2x*v3y - v3x*v2y ) ) * det;
;r[3][2] = -( v0x*( v1y*v3z - v3y*v1z ) + v0y*( v1z*v3x - v3z*v1x ) + v0z*( v1x*v3y - v3x*v1y ) ) * det;
;r[3][3] = 1.0f;
;
; Basically by reorganizing and factoring we can compute the inverse on the vu by performaning a number
; of cross prducts and vector multiplies

		.align 4
		.global	PS2_Invert
		
;.equ v0, vf01
;.equ v1, vf02
;.equ v2, vf03
;.equ v3, vf04
;.equ r0, vf05
;.equ r1, vf06
;.equ r2, vf07
;.equ r3, vf08
;.equ temp1, vf09
;.equ temp2, vf10
;.equ temp3, vf11
;.equ vOne, vf12		
;.equ det, vf13

PS2_Invert:
	mulx.w			vf12, vf00, vf00x							move		vf08, vf00
	addw.xyz		vf12, vf00, vf00w							mr32.w		vf05, vf00
	opmula.xyz		acc, vf02, vf03								mr32.w		vf06, vf00
	opmsub.xyz		vf13, vf03, vf02							mr32.w		vf07, vf00
	subw.w			vf12, vf12, vf00w							nop

	opmula.xyz		acc, vf02, vf03								nop
	opmsub.xyz		vf05, vf03, vf02							nop
	mul.xyz			vf13, vf13, vf01							nop
	opmula.xyz		acc, vf01, vf03								nop
	opmsub.xyz		vf06, vf03, vf01							nop
	opmula.xyz		acc, vf01, vf02								nop
	opmsub.xyz		vf07, vf02, vf01							nop
	mulax.x			acc, vf12, vf13x							nop
	madday.x		acc, vf12, vf13y							nop
	maddz.x			vf13, vf12, vf13z							nop	
	
	opmula.xyz		acc, vf03, vf04								nop
	opmsub.xyz		vf09, vf04, vf03							nop
	opmula.xyz		acc, vf03, vf04								div			Q, vf00w, vf13x
	
	opmsub.xyz		vf10, vf04, vf03							nop
	opmula.xyz		acc, vf02, vf04								nop
	opmsub.xyz		vf11, vf04, vf02							nop
	mul.xyz			vf09, vf09, vf02							nop
	mul.xyz			vf10, vf10, vf01							nop
	mul.xyz			vf11, vf11, vf01							nop
			
	addq.xyz		vf13, vf00, Q								nop
	mul.xyz			vf15, vf05, vf13							nop
	mul.xyz			vf16, vf06, vf13							nop
	mul.xyz			vf17, vf07, vf13							nop
	mulw.xyz		vf16, vf06, vf12w							nop
	mul.xyz			vf09, vf09, vf13							move.x		vf05x, vf15x		;want to transpose vf15,vf16,vf17
	mul.xyz			vf10, vf10, vf13							move.y		vf06y, vf16y
	mul.xyz			vf11, vf11, vf13							move.z		vf07z, vf17z
	mulw.w			vf09, vf00, vf00w							mr32.x		vf06x, vf15
	mulax.x			acc, vf12, vf09x							mr32.w		vf05w, vf16
	madday.x		acc, vf12, vf09y							mr32.y		vf07, vf15
	maddaz.x		acc, vf12, vf09z							nop
	mulax.y			acc, vf12, vf10x							nop			
	madday.y		acc, vf12, vf10y							mr32.z		vf05, vf05
	maddaz.y		acc, vf12, vf10z							mr32.w		vf05, vf17
	mulax.z			acc, vf12, vf11x							mr32.x		vf07, vf07
	madday.z		acc, vf12, vf11y							mr32.y		vf07, vf16
	maddaz.z		acc, vf12, vf11z							mr32.x		vf17, vf17
	maddx.xyz		vf08, vf00, vf00x							mr32.yz		vf05, vf05
	nop															nop
	nop															nop
	nop															mr32.w		vf17, vf17
	mulw.xz		vf08, vf08, vf12w								mr32.w		vf05, vf00
	nop															nop
	nop															nop
	nop[E]														mr32.z		vf06, vf17
	nop															nop