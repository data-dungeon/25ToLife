#include "test.h"

#include "..\motnflags.h"
#include "players\chuckie\chuckie_m.h"
#include "players\codes.h"
#include "players\actions.h"
#include "players\playersounds.h"

//---------------------------------------------------------------------
/* TEST THIS!! */

ANIM_TABLE CHUCKIE
	DW SCR_IDLE					//00	ACTION_IDLE	
	DW SCR_WALK					//01	ACTION_WALK	
	DW SCR_JOG					//02	ACTION_JOG
	DW SCR_RUN					//03	ACTION_RUN
	DW SCR_JUMP					//04	ACTION_JUMP	
	DW SCR_CRAWL					//05	ACTION_CRAWL
	DW SCR_CLIMB_HALFMETER		//06	ACTION_CLIMB_HALFMETER
	DW SCR_CLIMB_QUARTERMETER	//07	ACTION_CLIMB_QUARTERMETER
	DW SCR_LADDER				//08	ACTION_LADDER
	DW SCR_ROPE					//09	ACTION_ROPE
	DW SCR_HANG					//0a	ACTION_HANG
	DW SCR_PUSH					//0b	ACTION_PUSH
	DW SCR_CARPET				//0c	ACTION_CARPET
	DW SCR_SLIDE_FRONT			//0d	ACTION_SLIDE_FRONT
	DW SCR_SLIDE_BACK			//0e	ACTION_SLIDE_BACK
	DW SCR_SLED					//0f	ACTION_SLED
	DW SCR_BURNED				//10	ACTION_BURNED
	DW SCR_THROW					//11	ACTION_THROW
	DW SCR_HIT_FRONT				//12 ACTION_HIT_FRONT
	DW SCR_HIT_BACK				//13 ACTION_HIT_BACK
	DW SCR_STUMBLE				//14 ACTION_STUMBLE
	DW SCR_SWIM					//15 ACTION_SWIM
	DW SCR_SUCKED				//16 ACTION_SUCKED
	DW SCR_ROLL					//17 ACTION_ROLL
	DW SCR_DRIVE					//18 ACTION_DRIVE
	DW SCR_BUBBLE				//19 ACTION_BUBBLE
	DW SCR_VICTORY				//1a ACTION_VICTORY
	DW SCR_TRAPEZE				//1b ACTION_TRAPEZE
	DW SCR_FLY					//1c ACTION_FLY
	DW SCR_TRAMPOLINE_JUMP	//1d ACTION_TRAMPOLINE_JUMP
	DW SCR_LAND					//1e ACTION_TRAMPOLINE_LAND-- will be a custom trampoline land animation when we get one, use regular land for now
	DW SCR_SADDLE				//1f ACTION_SADDLE
	DW SCR_BLOWGUN				//20 ACTION_BLOWGUN

// ---------------------------
/* testing label followed by semicolon */
TEST_LABEL:; PUSHI 12; PUSHS "Test a little\nstring."; JUMP TEST_LABEL;
PUSH -12; ABS; PUSH 15; PUSH 19; MIN; PUSH 104; MAX; CALLC testFuncCall; CALLC testFuncCall2;
CMP; BNE SCR_TO_IDLE;
PUSHREG; CMP; BNE SCR_TO_IDLE; POPREG;
CALLC testFuncCall;
int testVar = (1 + 3); float testFloat = ( 1 - 13.5f ); string testString = "This is a test string.";
PUSH 12; INCR; DECR testVar;
PUSH_CALL %SCR_IDLE_NOINTERP
POP_CALL

string testUninitString;
string TEST_STRING = "This is a test";

PLAY_SOUND 3;
PLAY_SOUND "jump_k";
PLAY_SOUND_VOLUME 5 70;
PLAY_SOUND_VOLUME "jump_v" 100;

SET_ANIM_RATE 1.0f
SET_ANIM_RATE2 1.5f

SET_ACTION_LO 0x00000004
GET_ACTION_LO
SET_ACTION_HI 0x00080001
GET_ACTION_HI
SET_ACTION 0x000100001        // SET_ACTION is now a synonym for the ACTION opcode

PUSH -128
PUSH 2
SHRZ
POP
PUSH (testVar >>> 2)


//------------------------------------------
SCR_TO_IDLE:
//this entry point to the idle is from another script where some finishing anim to be run, and then to enter the idle anim
	ACTION				ACTION_IDLE
   PUSHI 5; PUSHS "Here's a string\nwith a newline, and a \"quoted\" part."; PUSHS "Here's another";;;;;;;
   PUSH "Here's a line on its own"
   PUSH (1.0 / (1.0 - 0.5));

   /* here is a mid-section
LABEL_TEST:
comment to strip out!! */
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	JUMP				SCR_IDLE_LOOP

SCR_IDLE_NOINTERP:
	ACTION				ACTION_IDLE
	START_MOTION		CHUCKIE_STAND 0 MOTNINF_FLAG_LOOPNOINTERP
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	JUMP				SCR_IDLE_LOOP

SCR_IDLE:
	ACTION				ACTION_IDLE
	START_MOTION		CHUCKIE_STAND 0 MOTNINF_FLAG_LOOP
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT

SCR_IDLE_LOOP:
//see if we should go into a walk or run
	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	DELAY				0
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM
	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_CRAWL
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION
	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_IDLE_LOOP2
	IF_LT				SCR_WALK			//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_JOG
	JUMP				SCR_RUN

SCR_IDLE_LOOP2:
//continue idling: see if we should go into a turn animation
	CODE				CODE_CHECK_ROTATION	//test rotation: 0 if stopped, -1 if turning left, 1 if turning right
	IF_LT				SCR_TURN_LEFT	//test sign bit of result, set -> neative
	IF_GT				SCR_TURN_RIGHT

	CODE				CODE_CHECK_UNSTABLE_SURFACE
	IF_SET				SCR_WOBBLE

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET			SCR_IDLE_CHANCE

	TEST_ENDMOTION							//did an idle anim just end?
	IF_SET				SCR_IDLE			//restart idle if so
	JUMP				SCR_IDLE_LOOP

SCR_IDLE_CHANCE:
	TEST_FLAG			ACTIONFLAG_SECONDARY_MOTION
	IF_SET				SCR_IDLE_LOOP

//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.004				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_IDLE_LOOP

//time to do a random idle anim...which one?
	GET_RANDOM			5
	CASE				SCR_IDLE1 SCR_IDLE2 SCR_IDLE3 SCR_IDLE4 SCR_IDLE5
SCR_IDLE1:
	START_MOTION		CHUCKIE_IDLE_MOVE 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_IDLE_END
SCR_IDLE2:
	START_MOTION		CHUCKIE_IDLE_LOOK_BACK 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_IDLE_END
SCR_IDLE3:
	START_MOTION		CHUCKIE_IDLE_SCRATCH 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_IDLE_END
SCR_IDLE4:
	START_MOTION		CHUCKIE_IDLE_NOSEWIPE 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_IDLE_END
SCR_IDLE5:
	START_MOTION		CHUCKIE_IDLE_ARMSCRATCH 0 MOTNINF_FLAG_ONESHOT

SCR_IDLE_END:
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_IDLE_LOOP

//------------------------------------------
// if idling on an unstable surface, then come here
// any kind of input
SCR_WOBBLE:
	START_MOTION		CHUCKIE_WOBBLE 0 MOTNINF_FLAG_LOOP

SCR_WOBBLE_LOOP:
	DELAY				0
	
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM
	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_CRAWL
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION
	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_WOBBLE_LOOP2
	IF_LT				SCR_WALK			//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_JOG
	JUMP				SCR_RUN

SCR_WOBBLE_LOOP2:
//continue idling: see if we should go into a turn animation
	CODE				CODE_CHECK_ROTATION	//test rotation: 0 if stopped, -1 if turning left, 1 if turning right
	IF_LT				SCR_TURN_LEFT	//test sign bit of result, set -> neative
	IF_GT				SCR_TURN_RIGHT
	JUMP				SCR_WOBBLE_LOOP

//------------------------------------------
SCR_TURN_RIGHT:
SCR_TURN_LEFT:
	START_MOTION		CHUCKIE_TURN 0 MOTNINF_FLAG_LOOP
SCR_TURN_LOOP:
//continue turning?
	DELAY				0
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM
	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_CRAWL
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION
	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running
	IF_EQ				SCR_TURN_LOOP2
	IF_LT				SCR_WALK			//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_JOG
	JUMP				SCR_RUN

SCR_TURN_LOOP2:
	CODE				CODE_CHECK_ROTATION	//test rotation: 0 if stopped, -1 if turning left, 1 if turning right
	IF_EQ				SCR_IDLE
	JUMP				SCR_TURN_LOOP



//------------------------------------------
SCR_WALK:
	CODE				CODE_FOOTPRINTBOTH
	ACTION				ACTION_WALK
	START_MOTION		CHUCKIE_WALK 0 MOTNINF_FLAG_LOOP
SCR_WALK_LOOP:
	DELAY				0
	
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM
	
	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE_1I				CODE_FOOTPRINTRIGHT 6
	CODE_1I				CODE_FOOTPRINTLEFT 16

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_ROLL
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION

	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running
	IF_EQ				SCR_WALK_TO_IDLE
	IF_LT				SCR_WALK_LOOP	//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_WALK_TO_JOG
	JUMP				SCR_WALK_TO_RUN
SCR_WALK_TO_IDLE:
//	START_MOTION		CHUCKIE_WALKTOSTAND 0 MOTNINF_FLAG_ONESHOT	//no walk-to-stand anim yet, just interp to stand
//	WAIT_FOR_END
	JUMP				SCR_IDLE
SCR_WALK_TO_JOG:
	ACTION				ACTION_JOG
	START_MOTION		CHUCKIE_JOG -1 MOTNINF_FLAG_LOOPBLENDINTERP	//-1 indicates to switch into similar frame of new anim
	JUMP				SCR_JOG_LOOP
SCR_WALK_TO_RUN:
	ACTION				ACTION_RUN
	START_MOTION		CHUCKIE_RUN -1 MOTNINF_FLAG_LOOPBLENDINTERP	//-1 indicates to switch into similar frame of new anim
	JUMP				SCR_RUN_LOOP


//------------------------------------------
SCR_JOG:
	CODE				CODE_FOOTPRINTBOTH
	ACTION				ACTION_JOG
	START_MOTION		CHUCKIE_JOG 0 MOTNINF_FLAG_LOOP

SCR_JOG_LOOP:
	DELAY				0

	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE_1I				CODE_FOOTPRINTRIGHT 5
	CODE_1I				CODE_FOOTPRINTLEFT 12

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_ROLL
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION

	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_JOG_TO_IDLE
	IF_LT				SCR_JOG_TO_WALK	//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_JOG_LOOP
	JUMP				SCR_JOG_TO_RUN
SCR_JOG_TO_IDLE:
//	START_MOTION		CHUCKIE_JOGTOSTAND 0 MOTNINF_FLAG_ONESHOT	//no JOG-to-stand anim yet, just interp to stand
//	WAIT_FOR_END
	JUMP				SCR_IDLE
SCR_JOG_TO_WALK:
	ACTION				ACTION_WALK
	START_MOTION		CHUCKIE_WALK -1 MOTNINF_FLAG_LOOPBLENDINTERP	//-1 indicates to switch into similar frame of new anim
	JUMP				SCR_WALK_LOOP
SCR_JOG_TO_RUN:
	ACTION				ACTION_RUN
	START_MOTION		CHUCKIE_RUN -1 MOTNINF_FLAG_LOOPBLENDINTERP	//-1 indicates to switch into similar frame of new anim
	JUMP				SCR_RUN_LOOP


//------------------------------------------
SCR_RUN:
	CODE				CODE_FOOTPRINTBOTH
	ACTION				ACTION_RUN
	START_MOTION		CHUCKIE_RUN 0 MOTNINF_FLAG_LOOP

SCR_RUN_LOOP:
	DELAY				0

	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_ROLL
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION

	CODE_1I				CODE_FOOTPRINTRIGHT 4
	CODE_1I				CODE_FOOTPRINTLEFT 9

	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running
	IF_EQ				SCR_RUN_TO_IDLE
	IF_LT				SCR_RUN_TO_WALK			//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_RUN_TO_JOG
	JUMP				SCR_RUN_LOOP

SCR_RUN_TO_IDLE:
	START_MOTION		CHUCKIE_RUNTOSTAND 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_TO_IDLE
SCR_RUN_TO_WALK:
	ACTION				ACTION_WALK
	START_MOTION		CHUCKIE_WALK -1 MOTNINF_FLAG_LOOPBLENDINTERP	//-1 indicates to switch into similar frame of new anim
	JUMP				SCR_WALK_LOOP
SCR_RUN_TO_JOG:
	ACTION				ACTION_JOG
	START_MOTION		CHUCKIE_JOG -1 MOTNINF_FLAG_LOOPBLENDINTERP	//-1 indicates to switch into similar frame of new anim
	JUMP				SCR_JOG_LOOP


//------------------------------------------
SCR_JUMP:
	ACTION				ACTION_JUMP

	START_MOTION		CHUCKIE_JUMPBEGIN 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	CODE				CODE_FOOTPRINTBOTH
	CODE				CODE_JUMP_IMPULSE	//jump into the air: 0 if failed, 1 if success
	IF_NOT_SET			SCR_IDLE
//which in-air anim to go to?
	TEST_RANDOM			0.6				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_JUMP2
	START_MOTION		CHUCKIE_JUMPINAIR 0 MOTNINF_FLAG_NOINTERP
	JUMP				SCR_JUMP_ENTER_LOOP
SCR_JUMP2:
	TEST_RANDOM			0.5				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_JUMP3
	START_MOTION		CHUCKIE_JUMPINAIRB 0 MOTNINF_FLAG_NOINTERP
	JUMP				SCR_JUMP_ENTER_LOOP
SCR_JUMP3:
	START_MOTION		CHUCKIE_JUMPINAIRC 0 MOTNINF_FLAG_NOINTERP

SCR_JUMP_ENTER_LOOP:
SCR_JUMP_LOOP:
	CODE				CODE_CHECK_VERTICLE_SPEED	// 1 if going up, 0 if no verticle speed, -1 if going down
	IF_LE				SCR_FALL2				// if going down, go into fall action
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_ACTION
	DELAY				0
	JUMP				SCR_JUMP_LOOP


//------------------------------------------
SCR_FALL:
	START_MOTION		CHUCKIE_JUMPINAIR 14 MOTNINF_FLAG_NONE
SCR_FALL2:
	ACTION				ACTION_JUMP
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION

SCR_FALL_LOOP:
	DELAY				0
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM_LAND
	CODE				CODE_TERMINAL_VELOCITY
	IF_SET				SCR_FALL_HARD	
	TEST_ONGROUND		
	IF_NOT_SET			SCR_FALL_LOOP
	JUMP				SCR_LAND

SCR_FALL_HARD:
	START_MOTION		CHUCKIE_LONG_FALL 0 MOTNINF_FLAG_LOOPNOINTERP
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION

SCR_FALL_HARD_LOOP:
	DELAY				0
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM_LAND
	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_SET				SCR_FALL
	TEST_ONGROUND		
	IF_NOT_SET			SCR_FALL_HARD_LOOP

SCR_LAND_HARD:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	SET_FLAG			ACTIONFLAG_NO_XZ_YROT

	START_MOTION		CHUCKIE_BUTTLAND 0 MOTNINF_FLAG_ONESHOTNOINTERP
	
	DELAY				0					// wait a frame before damaging avatar, in case code changes his motion

	CODE				CODE_DAMAGE_AVATAR
	CODE				CODE_LANDHARD_FX

	WAIT_FOR_END

	START_MOTION		CHUCKIE_BUTTSIT 0 MOTNINF_FLAG_ONESHOT
// this will allow the player to abort after sitting for awhile
SCR_BUTT_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_BUTT_END
	TEST_ENDMOTION
	IF_NOT_SET			SCR_BUTT_LOOP

SCR_BUTT_END:
	START_MOTION		CHUCKIE_BUTT2STANCE 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		15

   	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT

	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_IDLE_LOOP

//*****
SCR_LAND:
	CODE				CODE_HIDE_WEAPON
	CODE				CODE_LAND_FX

	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running
	IF_EQ				SCR_LAND_STOP
	IF_LT				SCR_LAND_WALK	//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_LAND_JOG

SCR_LAND_RUN:
//	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
//	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
//	START_MOTION		CHUCKIE_LANDTORUN 0 MOTNINF_FLAG_ONESHOTNOINTERP
	INTERP_FRAME		CHUCKIE_LANDTORUN 1
	WAIT_INTERP_DONE
	START_MOTION		CHUCKIE_LANDTORUN 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	NEW_ANIM			ACTION_RUN

SCR_LAND_JOG:
//	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
//	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
	START_MOTION		CHUCKIE_LANDTORUN 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	NEW_ANIM			ACTION_JOG

SCR_LAND_WALK:
//	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
//	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
	START_MOTION		CHUCKIE_LANDTORUN 0 MOTNINF_FLAG_ONESHOTNOINTERP	//dont have a land to walk, so land to run
	WAIT_FOR_END
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	NEW_ANIM			ACTION_WALK

SCR_LAND_STOP:
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	START_MOTION		CHUCKIE_LANDTOSTAND 0 MOTNINF_FLAG_ONESHOTNOINTERP
	JUMP				SCR_TO_IDLE

//------------------------------------------
// crawling behavior for chuckie is as follows:
// user presses a button and chuckie goes from standing to crawling (interruptable until frame 9)
// this goes to a crawl stance loop which occasionally calls an idle animation
// if turning without moving, then a turn loop is called
// if moving, then a crawl anim is called
// if the crawl button is released in the code it sets an abort flag
// if the abort flag is set before frame 9 of the first anim, it simply interps back to the standing stance
// otherwise, it calls a crawl-2-stance animation and returns to stance loop

SCR_CRAWL:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	ACTION				ACTION_CRAWL
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYROTATION
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	START_MOTION		CHUCKIE_STANDTOCRAWL 0 MOTNINF_FLAG_ONESHOT

SCR_CRAWL_INTERUPTABLE:
	DELAY				0

	CODE_1I				CODE_BUTTONDOWN 1
	IF_NOT_SET	  		SCR_IDLE
	TEST_FRAME			10								// if less than 10, then set
	IF_NOT_SET			SCR_CRAWL_INTERUPTABLE

	WAIT_FOR_END
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT

SCR_CRAWL_IDLE:
	START_MOTION		CHUCKIE_CRAWL_IDLE 0 MOTNINF_FLAG_LOOP
	CLR_FLAG			ACTIONFLAG_ALT_ANIM

SCR_CRAWL_IDLE_LOOP:
	DELAY				0

	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_CEILING
	IF_SET				SCR_SKIP_BUTTONCHECK1
	CODE_1I				CODE_BUTTONDOWN 1
	IF_NOT_SET	  		SCR_CRAWL_TO_STAND
SCR_SKIP_BUTTONCHECK1:
	CODE				CODE_CHECK_SPEED			//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_NE				SCR_START_CRAWL
	CODE				CODE_CHECK_ROTATION			//test rotation: 0 if stopped, -1 if turning left, 1 if turning right
	IF_NE				SCR_CRAWL_TURN
	JUMP				SCR_CRAWL_IDLE_TEST		//check for good time to do bored animation

SCR_START_CRAWL:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_CRAWL 0 MOTNINF_FLAG_LOOP

SCR_CRAWL_LOOP:
	DELAY				0

	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_CEILING
	IF_SET				SCR_SKIP_BUTTONCHECK2
	CODE_1I				CODE_BUTTONDOWN 1
	IF_NOT_SET	  		SCR_CRAWL_TO_STAND
SCR_SKIP_BUTTONCHECK2:
	CODE				CODE_CHECK_SPEED			//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_CRAWL_IDLE
	JUMP				SCR_CRAWL_LOOP

SCR_CRAWL_IDLE_TEST:
	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET			SCR_CRAWL_IDLE_CHANCE

	TEST_ENDMOTION									//did a bored anim just end?
	IF_SET				SCR_CRAWL_IDLE			//restart reg idle if so
	JUMP				SCR_CRAWL_IDLE_LOOP		//if not, then continue with bored anim

SCR_CRAWL_IDLE_CHANCE:
//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.001				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_CRAWL_IDLE_LOOP

//time to do a random crawl idle anim...which one? We only have one!
	START_MOTION		CHUCKIE_CRAWL_IDLE1 0 MOTNINF_FLAG_ONESHOT
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_CRAWL_IDLE_LOOP

//*****
SCR_CRAWL_TURN:
	START_MOTION		CHUCKIE_CRAWL_TURN 0 MOTNINF_FLAG_LOOP

SCR_CRAWL_TURN_LOOP:									//continue turning?
	DELAY				0

	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_CEILING
	IF_SET				SCR_SKIP_BUTTONCHECK3
	CODE_1I				CODE_BUTTONDOWN 1
	IF_NOT_SET	  		SCR_CRAWL_TO_STAND
SCR_SKIP_BUTTONCHECK3:
	CODE				CODE_CHECK_SPEED				//test speed: 0 if stopped, else moving
	IF_NE				SCR_START_CRAWL

SCR_TURN_LOOP2:
	CODE				CODE_CHECK_ROTATION				//test rotation: 0 if stopped, else turning
	IF_EQ				SCR_CRAWL_IDLE
	JUMP				SCR_CRAWL_TURN_LOOP

//*****
SCR_CRAWL_TO_STAND:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
	START_MOTION		CHUCKIE_CRAWLTOSTAND 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_FRAME		19
SCR_CRAWL_BACK_TO_IDLE:
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	JUMP				SCR_TO_IDLE

//------------------------------------------
SCR_CLIMB_HALFMETER:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	ACTION				ACTION_CLIMB_HALFMETER
	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION
	SET_FLAG			ACTIONFLAG_NOGRAVITY

// wait until player has gotten into position before proceeding with climb anim
	CODE				CODE_TRANSITION
	IF_SET				SCR_CLIMB_START
	START_MOTION		CHUCKIE_WALK 0 MOTNINF_FLAG_LOOP
SCR_CLIMB_TRANS_LOOP:
	DELAY				0
	CODE				CODE_TRANSITION
	IF_NOT_SET			SCR_CLIMB_TRANS_LOOP

SCR_CLIMB_START:
	START_MOTION		CHUCKIE_CLIMB_HALFMETER 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CLR_FLAG			ACTIONFLAG_NOGRAVITY

	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.51 0.25
	CODE				CODE_PLACE_ON_GROUND
	JUMP				SCR_IDLE_NOINTERP

//------------------------------------------
SCR_CLIMB_QUARTERMETER:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	ACTION				ACTION_CLIMB_QUARTERMETER
	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION
	SET_FLAG			ACTIONFLAG_NOGRAVITY

// wait until player has gotten into position before proceeding with climb anim
	CODE				CODE_TRANSITION
	IF_SET				SCR_QCLIMB_START
	START_MOTION		CHUCKIE_WALK 0 MOTNINF_FLAG_LOOP
SCR_QCLIMB_TRANS_LOOP:
	DELAY				0
	CODE				CODE_TRANSITION
	IF_NOT_SET			SCR_QCLIMB_TRANS_LOOP

SCR_QCLIMB_START:
	START_MOTION		CHUCKIE_CLIMB_QUARTERMETER 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CLR_FLAG			ACTIONFLAG_NOGRAVITY

	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.26 0.25
	CODE				CODE_PLACE_ON_GROUND
	JUMP				SCR_IDLE_NOINTERP

//------------------------------------------
// ladder behavior is as follows:
// if player makes contact with a ladder collision, he is put into this animation
// if he is in air when he makes contact, he will slide down ladder until he is at a multiple
// of 0.4 meters from bottom of ladder and then goes into a grab animation
// the player is locked on the ladder until he has gone through 1 cycle of his animation
// the player will travel 0.4 meters up or down until he comes to rest
// if he touches ground, then he is sent to the stance idle
// if the jump button is pressed, it sets the abort flag
// if the abort flag is set, he is sent into the fall anim

SCR_LADDER:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	TEST_ONGROUND
	IF_NOT_SET			SCR_LADDER_GRAB

	ACTION				ACTION_LADDER
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION
	SET_FLAG			ACTIONFLAG_NOGRAVITY

// wait until player has gotten into position before proceeding with climb anim
	CODE				CODE_TRANSITION
	IF_SET				SCR_LADDER_UP
	START_MOTION		CHUCKIE_WALK 0 MOTNINF_FLAG_LOOP
SCR_LADDER_TRANS_LOOP:
	DELAY				0
	CODE				CODE_TRANSITION
	IF_NOT_SET			SCR_LADDER_TRANS_LOOP

//*****
// ladder up
SCR_LADDER_UP:
	CODE				CODE_LADDER_TOP
	IF_SET				SCR_LADDER_CLIMB_UP
	START_MOTION		CHUCKIE_LADDERCLIMB 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_LADDER_UP_LOOP

SCR_LADDER_UP_NOINTERP:
	CODE				CODE_LADDER_TOP
	IF_SET				SCR_LADDER_CLIMB_UP_NOINTERP
	START_MOTION		CHUCKIE_LADDERCLIMB 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_LADDER_UP_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_LADDER_JUMP
	TEST_ENDMOTION
	IF_NOT_SET			SCR_LADDER_UP_LOOP

	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.4 0.0
	
	CODE				CODE_LADDER_UPDOWN
	IF_GT				SCR_LADDER_UP_NOINTERP

	START_MOTION		CHUCKIE_LADDERIDLE 0 MOTNINF_FLAG_ONESHOTNOINTERP
	JUMP				SCR_LADDER_LOOP

//*****
// ladder down
SCR_LADDER_DOWN:
	TEST_FLAG			ACTIONFLAG_ALT_ANIM					//if we are in reg animation, then just move down
	IF_NOT_SET	 		SCR_LADDER_DOWN_NOINTERP
	START_MOTION		CHUCKIE_LADDERIDLE 0 MOTNINF_FLAG_ONESHOT
	DELAY				3
	CODE_3F				CODE_OFFSET_ACTOR 0.0 -0.4 0.0
	START_MOTION		CHUCKIE_LADDERCLIMB -2 MOTNINF_FLAG_ONESHOTNOINTERP			// -2 means start at end of motion
	JUMP				SCR_LADDER_DOWN_LOOP

SCR_LADDER_DOWN_NOINTERP:
	CODE_3F				CODE_OFFSET_ACTOR 0.0 -0.4 0.0
	START_MOTION		CHUCKIE_LADDERCLIMB -2 MOTNINF_FLAG_ONESHOTNOINTERP			// -2 means start at end of motion

SCR_LADDER_DOWN_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_LADDER_JUMP
	TEST_ENDMOTION
	IF_NOT_SET			SCR_LADDER_DOWN_LOOP

SCR_LADDER_BOTTOM_CHECK:
	CODE				CODE_LADDER_BOTTOM
	IF_SET				SCR_LADDER_BOTTOM

	CODE				CODE_LADDER_UPDOWN
	IF_LT				SCR_LADDER_DOWN_NOINTERP

SCR_LADDER_IDLE:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_LADDERIDLE 0 MOTNINF_FLAG_ONESHOTNOINTERP

//*****
// ladder idle
SCR_LADDER_LOOP:
	DELAY				0
	
	CODE				CODE_LADDER_UPDOWN
	IF_LT				SCR_LADDER_DOWN
	IF_GT				SCR_LADDER_UP
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_LADDER_JUMP

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET	 		SCR_LADDER_IDLE_CHANCE

	TEST_ENDMOTION									//did an idle anim just end?
	IF_SET				SCR_LADDER_IDLE			//restart idle if so
	JUMP				SCR_LADDER_LOOP

SCR_LADDER_IDLE_CHANCE:
//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.008				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_LADDER_LOOP

//time to do a random idle anim...which one?
	GET_RANDOM			2
	CASE				SCR_LADDER_IDLE1 SCR_LADDER_IDLE2
SCR_LADDER_IDLE1:
	START_MOTION		CHUCKIE_LADDER_IDLE_LOOK_DOWN 0 MOTNINF_FLAG_ONESHOTNOINTERP
	JUMP				SCR_LADDER_IDLE_END
SCR_LADDER_IDLE2:
	START_MOTION		CHUCKIE_LADDER_IDLE_LOOK_UP 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_LADDER_IDLE_END:
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_LADDER_LOOP



//*****
// ladder bottom (climb off)
SCR_LADDER_BOTTOM:
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.0 -0.12
	JUMP				SCR_IDLE

//*****
// ladder jump
SCR_LADDER_JUMP:
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.0 -0.12
	ACTION				ACTION_JUMP
	CODE				CODE_LADDER_IMPULSE	
	JUMP				SCR_FALL

//*****
// ladder jump onto
SCR_LADDER_GRAB:
	ACTION				ACTION_LADDER
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	SET_FLAG			ACTIONFLAG_NOYCOLLISION
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION

SCR_LADDER_GRAB_LOOP:
	DELAY				0
	TEST_ONGROUND
	IF_SET				SCR_LADDER_BOTTOM
	CODE				CODE_LADDER_GRAB
	IF_NOT_SET			SCR_LADDER_GRAB_LOOP

	TEST_ONGROUND
	IF_SET				SCR_LADDER_BOTTOM

	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	START_MOTION		CHUCKIE_LADDERGRAB 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END
	JUMP				SCR_LADDER_IDLE

//*****
// ladder climb up
SCR_LADDER_CLIMB_UP:
	START_MOTION		CHUCKIE_LADDER_UP2STANCE 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_LADDER_CLIMB_UP_START

SCR_LADDER_CLIMB_UP_NOINTERP:
	START_MOTION		CHUCKIE_LADDER_UP2STANCE 0 MOTNINF_FLAG_ONESHOTNOINTERP
SCR_LADDER_CLIMB_UP_START:
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CLR_FLAG			ACTIONFLAG_NOGRAVITY

	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.60021 0.2154
	JUMP				SCR_IDLE_NOINTERP
	

//------------------------------------------
// rope behavior is as follows:
// it is assumed that the player is in air when making contact with rope
// player will go into a grab animation and then an idle loop
// player can inchworm up rope, or slide down rope
// player can rotate around rope at will
// player can slide off rope or jump off rope

SCR_ROPE:
	ACTION				ACTION_ROPE
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	CODE				CODE_STOPY
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	CODE_1F				CODE_SETVELY 0.0

	START_MOTION		CHUCKIE_ROPEGRAB 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	START_MOTION		CHUCKIE_ROPE_IDLE 0 MOTNINF_FLAG_LOOPNOINTERP
	JUMP				SCR_ROPE_LOOP

SCR_ROPE_UP:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_ROPECLIMB 0 MOTNINF_FLAG_LOOP

SCR_ROPE_UP_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_ROPE_JUMP
	CODE				CODE_ROPE_UPDOWN
	IF_GT				SCR_ROPE_UP_LOOP
	IF_LT				SCR_ROPE_DOWN
	JUMP				SCR_ROPE_LOOP_START

SCR_ROPE_DOWN:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_ROPECLIMBDOWN 0 MOTNINF_FLAG_LOOP

SCR_ROPE_DOWN_LOOP:
	DELAY				0
	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_SET				SCR_ROPE_FALL
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_ROPE_JUMP
	CODE				CODE_ROPE_UPDOWN
	IF_LT				SCR_ROPE_DOWN_LOOP
	IF_GT				SCR_ROPE_UP

	START_MOTION		CHUCKIE_ROPE_CLIMBDOWN_STOP 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	START_MOTION		CHUCKIE_ROPE_IDLE 0 MOTNINF_FLAG_LOOPNOINTERP
	JUMP				SCR_ROPE_LOOP

SCR_ROPE_LOOP_START:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_ROPE_IDLE 0 MOTNINF_FLAG_LOOP

SCR_ROPE_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_ROPE_JUMP
	CODE				CODE_ROPE_UPDOWN
	IF_GT				SCR_ROPE_UP
	IF_LT				SCR_ROPE_DOWN

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET	 		SCR_ROPE_IDLE_CHANCE

	TEST_ENDMOTION									//did an idle anim just end?
	IF_SET				SCR_ROPE_LOOP_START			//restart idle if so
	JUMP				SCR_ROPE_LOOP

SCR_ROPE_IDLE_CHANCE:
//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.01				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_ROPE_LOOP

//time to do a random idle anim...which one?
	GET_RANDOM			2
	CASE				SCR_ROPE_IDLE1 SCR_ROPE_IDLE2
SCR_ROPE_IDLE1:
	START_MOTION		CHUCKIE_ROPE_IDLE_LOOK_DOWN 0 MOTNINF_FLAG_ONESHOTNOINTERP
	JUMP				SCR_ROPE_IDLE_END
SCR_ROPE_IDLE2:
	START_MOTION		CHUCKIE_ROPE_IDLE_LOOK_UP 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_ROPE_IDLE_END:
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_ROPE_LOOP

//*****
SCR_ROPE_JUMP:
	CODE				CODE_ROPE_IMPULSE
SCR_ROPE_FALL:
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	ACTION				ACTION_JUMP
	JUMP				SCR_FALL

//------------------------------------------
// hang behavior is as follows:
// the player's body will jar as it makes contact with edge, then go to hang idle
// the player will be able to shimmy left/right
// shimmy will always return to main idle anim from which a bored anim might play
// if the jump button is pressed, the player will go directly to the fall animation
// if forward is pressed, then player will climb ledge and return to idle

SCR_HANG:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	CODE				CODE_STOPY
	ACTION				ACTION_HANG

	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION

	START_MOTION		CHUCKIE_LEDGE_GRAB 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

SCR_HANG_START:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_LEDGE_HANG 0 MOTNINF_FLAG_LOOPNOINTERP

SCR_HANG_LOOP:	
	DELAY				0
	CODE				CODE_HANG_LEFTRIGHT					//check for direction for anim
	IF_LT				SCR_HANG_SHIMMY_LEFT
	IF_GT				SCR_HANG_SHIMMY_RIGHT
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_HANG_JUMP
	CODE_1I				CODE_BUTTONPRESSED 1
	IF_SET				SCR_HANG_CLIMB

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET			SCR_HANG_IDLE_CHANCE

	TEST_ENDMOTION							//did an idle anim just end?
	IF_SET				SCR_HANG_START			//restart idle if so
	JUMP				SCR_HANG_LOOP

SCR_HANG_IDLE_CHANCE:
//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.02				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_HANG_LOOP

//time to do a random idle anim...which one?
	GET_RANDOM			3
	CASE				SCR_HANG_IDLE1 SCR_HANG_IDLE2 SCR_HANG_IDLE3
SCR_HANG_IDLE1:
	START_MOTION		CHUCKIE_LEDGE_IDLE_ADJUST 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_HANG_IDLE_END
SCR_HANG_IDLE2:
	START_MOTION		CHUCKIE_LEDGE_IDLE_LOOK_LEFT 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_HANG_IDLE_END
SCR_HANG_IDLE3:
	START_MOTION		CHUCKIE_LEDGE_IDLE_LOOK_RIGHT 0 MOTNINF_FLAG_ONESHOT

SCR_HANG_IDLE_END:
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_HANG_LOOP

//*****
SCR_HANG_SHIMMY_LEFT:
	START_MOTION		CHUCKIE_LEDGE_MOVE_LEFT 0 MOTNINF_FLAG_LOOP

SCR_HANG_SHIMMY_LEFT_LOOP:
	DELAY				0
	CODE				CODE_HANG_LEFTRIGHT					//check for direction for anim
	IF_LT				SCR_HANG_SHIMMY_LEFT_LOOP

	SET_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_LEDGE_MOVE_LEFT_STOP 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_HANG_LOOP
	
//*****
SCR_HANG_SHIMMY_RIGHT:
	START_MOTION		CHUCKIE_LEDGE_MOVE_RIGHT 0 MOTNINF_FLAG_LOOP

SCR_HANG_SHIMMY_RIGHT_LOOP:
	DELAY				0
	CODE				CODE_HANG_LEFTRIGHT					//check for direction for anim
	IF_GT				SCR_HANG_SHIMMY_RIGHT_LOOP

	SET_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_LEDGE_MOVE_RIGHT_STOP 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_HANG_LOOP
	
//*****
SCR_HANG_CLIMB:	
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	CODE				CODE_HANG_ROOMFORCLIMBUP			//is there enough room for player to stand on this platform?
	IF_NOT_SET			SCR_HANG_LOOP

	CODE_1F				CODE_SETVELX 0.0
	START_MOTION		CHUCKIE_LEDGE_PULLUP 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CLR_FLAG			ACTIONFLAG_NOGRAVITY

	CODE_3F				CODE_OFFSET_ACTOR 0.0 0.76 0.25
	CODE				CODE_PLACE_ON_GROUND
	JUMP				SCR_IDLE_NOINTERP

//*****
SCR_HANG_JUMP:
	CODE_1F				CODE_SETVELX 0.0
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	ACTION				ACTION_JUMP
	RESUME_MOTION
	JUMP				SCR_FALL

//------------------------------------------
// push behavior is as follows:
// push script is called from code when encountering a dynamic object
// this looping animation will continue until
// 1) a button is pressed
// 2) the animation is aborted by code (it no longer detects the dynamic object)
// 3) you walk off an edge

SCR_PUSH:
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	START_MOTION		CHUCKIE_PUSH_OBJECT 0 MOTNINF_FLAG_LOOP

SCR_PUSH_LOOP:
	DELAY				0

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_PUSH2JUMP
	CODE_1I				CODE_BUTTONDOWN 1
	IF_SET				SCR_PUSH2CRAWL

	CODE_1I				CODE_FOOTPRINTRIGHT 4
	CODE_1I				CODE_FOOTPRINTLEFT 12

	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_PUSH2IDLE

	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_NOT_SET			SCR_PUSH_LOOP

SCR_PUSH_ABORT:
	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_IDLE
	IF_LT				SCR_WALK			//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_JOG
	JUMP				SCR_RUN

SCR_PUSH2IDLE:
	CODE				CODE_CLEAR_PUSH
	JUMP				SCR_IDLE

SCR_PUSH2JUMP:
	CODE				CODE_CLEAR_PUSH
	JUMP				SCR_JUMP

SCR_PUSH2CRAWL:
	CODE				CODE_CLEAR_PUSH
	JUMP				SCR_CRAWL

//------------------------------------------
// carpet behavior is as follows:
//
//
//
//
//
//

SCR_CARPET:
	START_MOTION		CHUCKIE_RIDE_HOVER 0 MOTNINF_FLAG_LOOPNOINTERP
	JUMP				SCR_CARPET_LOOP

SCR_CARPET_RIDE:
	START_MOTION		CHUCKIE_RIDE 0 MOTNINF_FLAG_LOOP

SCR_CARPET_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_LOOP

//*****
SCR_CARPET_LEFT:
	START_MOTION		CHUCKIE_RIDE_POSE_LEFT 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_LEFT_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT_LOOP SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE

//*****
SCR_CARPET_UPLEFT:
	START_MOTION		CHUCKIE_RIDE_POSE_UPLEFT 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_UPLEFT_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT_LOOP SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE

//*****
SCR_CARPET_UP:
	START_MOTION		CHUCKIE_RIDE_POSE_UP 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_UP_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP_LOOP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE

//*****
SCR_CARPET_UPRIGHT:
	START_MOTION		CHUCKIE_RIDE_POSE_UPRIGHT 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_UPRIGHT_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT_LOOP SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE

//*****
SCR_CARPET_RIGHT:
	START_MOTION		CHUCKIE_RIDE_POSE_RIGHT 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_RIGHT_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT_LOOP SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE

//*****
SCR_CARPET_DOWNRIGHT:
	START_MOTION		CHUCKIE_RIDE_POSE_DOWNRIGHT 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_DOWNRIGHT_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT_LOOP SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE

//*****
SCR_CARPET_DOWN:
	START_MOTION		CHUCKIE_RIDE_POSE_DOWN 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_DOWN_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN_LOOP SCR_CARPET_DOWNLEFT

	JUMP				SCR_CARPET_RIDE
	
//*****
SCR_CARPET_DOWNLEFT:
	START_MOTION		CHUCKIE_RIDE_POSE_DOWNLEFT 0 MOTNINF_FLAG_ONESHOT

SCR_CARPET_DOWNLEFT_LOOP:
	DELAY				0

	CODE				CODE_CHECK_CARPET_UDLR
	CASE				SCR_CARPET_LEFT SCR_CARPET_UPLEFT SCR_CARPET_UP SCR_CARPET_UPRIGHT SCR_CARPET_RIGHT SCR_CARPET_DOWNRIGHT SCR_CARPET_DOWN SCR_CARPET_DOWNLEFT_LOOP

	JUMP				SCR_CARPET_RIDE
	
//------------------------------------------
SCR_SLIDE_FRONT:
	CODE				CODE_HIDE_WEAPON
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION

	INTERP_FRAME		CHUCKIE_SLIDE_STOMACH_START 6
	WAIT_INTERP_DONE

	START_MOTION		CHUCKIE_SLIDE_STOMACH_START 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	START_MOTION		CHUCKIE_SLIDE_STOMACH 0 MOTNINF_FLAG_LOOPNOINTERP

SCR_SLIDE_FRONT_LOOP:
	DELAY				0
	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_NOT_SET			SCR_SLIDE_FRONT_LOOP

SCR_SLIDE_FRONT_STAND:
	SET_FLAG			ACTIONFLAG_NOYROTATION

	START_MOTION		CHUCKIE_SLIDE_STOMACH_FINISH 0 MOTNINF_FLAG_ONESHOTNOINTERP
SCR_SLIDE_FRONT_FINISH_LOOP:
	DELAY				0
	TEST_ONGROUND
	IF_NOT_SET			SCR_SLIDE_FRONT2STANCE
	TEST_ENDMOTION
	IF_NOT_SET			SCR_SLIDE_FRONT_FINISH_LOOP

SCR_SLIDE_FRONT2STANCE:
	START_MOTION		CHUCKIE_ONSTOMACH2STANCE 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_SLIDE_FRONT2STANCE_LOOP:
	DELAY				0
	TEST_ONGROUND
	IF_NOT_SET			SCR_SLIDE_FALL
	TEST_FRAME			32
	IF_NOT_SET			SCR_SLIDE_FRONT2STANCE_LOOP
	
	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	CLR_FLAG			ACTIONFLAG_NOYROTATION

	CODE				CODE_FOOTPRINTBOTH

	SET_FLAG			ACTIONFLAG_ALT_ANIM
	ACTION				ACTION_IDLE
	JUMP				SCR_IDLE_LOOP

//------------------------------------------
SCR_SLIDE_BACK:
	CODE				CODE_HIDE_WEAPON
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION

	INTERP_FRAME		CHUCKIE_SLIDE_BACK_START 6
	WAIT_INTERP_DONE

	START_MOTION		CHUCKIE_SLIDE_BACK_START 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	START_MOTION		CHUCKIE_SLIDE_BACK 0 MOTNINF_FLAG_LOOPNOINTERP

SCR_SLIDE_BACK_LOOP:
	DELAY				0
	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_NOT_SET			SCR_SLIDE_BACK_LOOP

SCR_SLIDE_BACK_STAND:
	SET_FLAG			ACTIONFLAG_NOYROTATION

	START_MOTION		CHUCKIE_SLIDE_BACK_FINISH 0 MOTNINF_FLAG_ONESHOTNOINTERP
SCR_SLIDE_BACK_FINISH_LOOP:
	DELAY				0
	TEST_ONGROUND
	IF_NOT_SET			SCR_SLIDE_BACK2STANCE
	TEST_ENDMOTION
	IF_NOT_SET			SCR_SLIDE_BACK_FINISH_LOOP

SCR_SLIDE_BACK2STANCE:
	START_MOTION		CHUCKIE_ONBACK2STANCE 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_SLIDE_BACK2STANCE_LOOP:
	DELAY				0
	TEST_ONGROUND
	IF_NOT_SET			SCR_SLIDE_FALL
	TEST_FRAME			29
	IF_NOT_SET			SCR_SLIDE_BACK2STANCE_LOOP
	
	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	CLR_FLAG			ACTIONFLAG_NOYROTATION

	CODE				CODE_FOOTPRINTBOTH

	SET_FLAG			ACTIONFLAG_ALT_ANIM
	ACTION				ACTION_IDLE
	JUMP				SCR_IDLE_LOOP

//*****
SCR_SLIDE_FALL:
	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	JUMP				SCR_FALL

//------------------------------------------
// sled behavior is as follows:
//
//
//
//
//
//

SCR_SLED:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_RIDE 0 MOTNINF_FLAG_LOOP

SCR_SLED_LOOP:
	DELAY				0

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_SLED_JUMP
	CODE				CODE_CHECK_SLED_UD
	IF_LT				SCR_SLED_DOWN
	IF_GT				SCR_SLED_UP

	TEST_FLAG			ACTIONFLAG_ALT_ANIM
	IF_NOT_SET			SCR_SLED_LOOP

	TEST_ENDMOTION
	IF_NOT_SET			SCR_SLED_LOOP
	JUMP				SCR_SLED

//*****
SCR_SLED_UP:
	START_MOTION		CHUCKIE_RIDE_HOVER 0 MOTNINF_FLAG_LOOP

SCR_SLED_UP_LOOP:
	DELAY				0

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_SLED_JUMP
	CODE				CODE_CHECK_SLED_UD
	IF_LT				SCR_SLED_DOWN
	IF_EQ				SCR_SLED
	JUMP				SCR_SLED_UP_LOOP
	
//*****
SCR_SLED_DOWN:
	START_MOTION		CHUCKIE_RIDE_POSE_DOWN 0 MOTNINF_FLAG_LOOP

SCR_SLED_DOWN_LOOP:
	DELAY				0

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_SLED_JUMP
	CODE				CODE_CHECK_SLED_UD
	IF_GT				SCR_SLED_UP
	IF_EQ				SCR_SLED
	JUMP				SCR_SLED_DOWN_LOOP

//*****
SCR_SLED_JUMP:
	START_MOTION		CHUCKIE_RIDE_HOVER 0 MOTNINF_FLAG_LOOP
	CODE				CODE_JUMP_IMPULSE	//jump into the air: 0 if failed, 1 if success

SCR_SLED_JUMP_LOOP:
	DELAY				0

	TEST_ONGROUND		
	IF_NOT_SET			SCR_SLED_JUMP_LOOP

	START_MOTION		CHUCKIE_RIDE_BUMPA 0 MOTNINF_FLAG_ONESHOTNOINTERP

	CODE				CODE_SLED_LAND_FX

	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_SLED_LOOP


//------------------------------------------
// action
SCR_ACTION:
	TEST_ONGROUND
	IF_NOT_SET			SCR_ACTION_JUMP

	CODE				CODE_WHAT_ACTION
	CASE				SCR_THROW_SNOWBALL SCR_THROW_GRENADE

SCR_ACTION_JUMP:
	CODE				CODE_WHAT_ACTION
	CASE				SCR_THROW_IN_AIR SCR_THROW_IN_AIR

//------------------------------------------
// throw item
SCR_THROW:

//*****
SCR_THROW_SNOWBALL:
	ACTION				ACTION_THROW
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT

	START_MOTION		CHUCKIE_THROW 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_FRAME		3
	CODE				CODE_SHOW_WEAPON

SCR_THROW_RESUME:
	WAIT_FOR_FRAME		9
	CODE				CODE_LAUNCH_WEAPON
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	JUMP				SCR_IDLE_NOINTERP

//*****
SCR_THROW_GRENADE:
	ACTION				ACTION_THROW
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYROTATION

	START_MOTION		CHUCKIE_STAND 0 MOTNINF_FLAG_ONESHOT

SCR_THROW_GRENADE_BUTTON_UP:
	DELAY				0
	CODE_1I				CODE_BUTTONDOWN 2
	IF_NOT_SET			SCR_DROP
	TEST_FRAME			5
	IF_NOT_SET			SCR_THROW_GRENADE_BUTTON_UP

	START_MOTION		CHUCKIE_THROW_GRENADE 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		3

	CODE_1I				CODE_SELECT_WEAPON 0
	CODE				CODE_SHOW_WEAPON

	WAIT_FOR_FRAME		6
	
	PAUSE_MOTION

SCR_THROW_GRENADE_WAIT:
	DELAY				0
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_THROW_GRENADE_WAIT

	RESUME_MOTION

SCR_THROW_GRENADE_NOW:
	WAIT_FOR_FRAME		13
	CODE				CODE_LAUNCH_WEAPON
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	JUMP				SCR_IDLE_NOINTERP

//*****
SCR_DROP:
	START_MOTION		CHUCKIE_PLACE_BOMB 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_FRAME		5

	CODE_1I				CODE_SELECT_WEAPON 1
	CODE				CODE_SHOW_WEAPON
	WAIT_FOR_FRAME		9
	CODE				CODE_LAUNCH_WEAPON
	WAIT_FOR_FRAME		18

	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_IDLE_LOOP

//*****
SCR_THROW_IN_AIR:
	ACTION				ACTION_THROW
	START_MOTION		CHUCKIE_JUMPTHROW 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_THROW_IN_AIR_LOOP1:
	DELAY				0
	TEST_ONGROUND
	IF_SET				SCR_THROW_IN_AIR_ABORT
	TEST_FRAME			2
	IF_NOT_SET			SCR_THROW_IN_AIR_LOOP1
	
	CODE				CODE_SHOW_WEAPON

SCR_THROW_IN_AIR_LOOP2:
	DELAY				0
	TEST_ONGROUND
	IF_SET				SCR_THROW_IN_AIR_ABORT
	TEST_FRAME			5
	IF_NOT_SET			SCR_THROW_IN_AIR_LOOP2

	CODE				CODE_LAUNCH_WEAPON
	
SCR_THROW_IN_AIR_LOOP3:
	DELAY				0
	TEST_ONGROUND
	IF_SET				SCR_LAND
	TEST_ENDMOTION	
	IF_NOT_SET			SCR_THROW_IN_AIR_LOOP3

	CLR_FLAG			ACTIONFLAG_NOYROTATION
	JUMP				SCR_FALL

SCR_THROW_IN_AIR_ABORT:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CODE				CODE_STOPXZ
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT

	START_MOTION		CHUCKIE_THROW 6 MOTNINF_FLAG_ONESHOTNOINTERP
	JUMP				SCR_THROW_RESUME

//------------------------------------------
//burned behavior is this: avatar is fired into the air with smoke coming off his butt,
//he is damaged immediately, if he somehow lands without reaching terminal speed, he can
//land unharmed, otherwise he lands hard and is harmed again

SCR_BURNED:
	CODE				CODE_DAMAGE_AVATAR

	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	START_MOTION		CHUCKIE_LONG_FALL 0 MOTNINF_FLAG_LOOPNOINTERP

SCR_BURNED_LOOP:
	DELAY				0

	CODE				CODE_SMOKE_PUFF

	CODE				CODE_TERMINAL_VELOCITY
	IF_SET				SCR_BURNED_FALL_HARD_LOOP

	TEST_ONGROUND		
	IF_NOT_SET			SCR_BURNED_LOOP

	JUMP				SCR_LAND

SCR_BURNED_FALL_HARD_LOOP:
	DELAY				0

	CODE				CODE_SMOKE_PUFF

	TEST_ONGROUND		
	IF_NOT_SET			SCR_BURNED_FALL_HARD_LOOP
	
	JUMP				SCR_LAND_HARD

//------------------------------------------
SCR_HIT_FRONT:
   	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
   	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	START_MOTION		CHUCKIE_KNOCKDOWN_FORWARD 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		9
	CODE_1I				CODE_START_SOUND 1
	CODE				CODE_LANDHARD_FX
	WAIT_FOR_END

	START_MOTION		CHUCKIE_LAY_STOMACH 0 MOTNINF_FLAG_ONESHOTNOINTERP
// this will allow the player to abort after sitting for awhile
SCR_HIT_FRONT_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_HIT_FRONT_END
	TEST_ENDMOTION
	IF_NOT_SET			SCR_HIT_FRONT_LOOP

SCR_HIT_FRONT_END:
	START_MOTION		CHUCKIE_ONSTOMACH2STANCE 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		32

   	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT

	CODE				CODE_FOOTPRINTBOTH

	ACTION				ACTION_IDLE
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_IDLE_LOOP
		
//------------------------------------------
SCR_HIT_BACK:
   	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
   	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	START_MOTION		CHUCKIE_KNOCKDOWN_BACK 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		10
	CODE_1I				CODE_START_SOUND 2
	CODE				CODE_LANDHARD_FX
	WAIT_FOR_END

	START_MOTION		CHUCKIE_LAY_BACK 0 MOTNINF_FLAG_ONESHOTNOINTERP
// this will allow the player to abort after sitting for awhile
SCR_HIT_BACK_LOOP:
	DELAY				0
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_HIT_BACK_END
	TEST_ENDMOTION
	IF_NOT_SET			SCR_HIT_BACK_LOOP

SCR_HIT_BACK_END:
	START_MOTION		CHUCKIE_ONBACK2STANCE 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		29

   	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT

	CODE				CODE_FOOTPRINTBOTH

	ACTION				ACTION_IDLE
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_IDLE_LOOP

//------------------------------------------
SCR_STUMBLE:
   	SET_FLAG			ACTIONFLAG_NO_XZ_YROT
   	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	START_MOTION		CHUCKIE_STUMBLE_BACK 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_END
	JUMP				SCR_IDLE

//------------------------------------------
// swim behavior:
// if player is submerged he will come here from run/walk/jog/idle or land
// if he is still moving the stick, he will go directly to a paddle

SCR_SWIM:
	ACTION				ACTION_SWIM
	CODE				CODE_CLEAR_LAST_MATERIAL
	CODE				CODE_CHECK_SPEED
	IF_NE				SCR_SWIM_PADDLE
	JUMP				SCR_SWIM_TREAD

//*****
SCR_SWIM_LAND:
	ACTION				ACTION_SWIM
	CODE				CODE_CLEAR_LAST_MATERIAL
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYROTATION
	START_MOTION		CHUCKIE_WATER_LAND 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_SWIM_LAND_LOOP:
	DELAY				0

	TEST_ONGROUND
	IF_SET				SCR_IDLE

	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM_LAND_LOOP

	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION

	CODE				CODE_CHECK_SPEED
	IF_EQ				SCR_SWIM_TREAD

	JUMP				SCR_SWIM_PADDLE_START

//*****
SCR_SWIM_TREAD:
	START_MOTION		CHUCKIE_WATER_TREAD 0 MOTNINF_FLAG_LOOP

SCR_SWIM_TREAD_LOOP:
	DELAY				0

	TEST_ONGROUND
	IF_SET				SCR_IDLE

	CODE				CODE_CHECK_SPEED
	IF_NE				SCR_SWIM_PADDLE_START

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_SWIM_JUMP

	JUMP				SCR_SWIM_TREAD_LOOP

//*****
SCR_SWIM_PADDLE_START:
	START_MOTION		CHUCKIE_WATER_PADDLE_START 0 MOTNINF_FLAG_ONESHOT
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_SWIM_PADDLE_LOOP

SCR_SWIM_PADDLE:
	START_MOTION		CHUCKIE_WATER_PADDLE 0 MOTNINF_FLAG_LOOPNOINTERP
	CLR_FLAG			ACTIONFLAG_ALT_ANIM

SCR_SWIM_PADDLE_LOOP:
	DELAY				0

	TEST_ONGROUND
	IF_SET				SCR_IDLE

	CODE				CODE_CHECK_SPEED
	IF_EQ				SCR_SWIM_TREAD

	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_SWIM_JUMP

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET			SCR_SWIM_PADDLE_LOOP

	TEST_ENDMOTION					
	IF_NOT_SET		 	SCR_SWIM_PADDLE_LOOP
	JUMP				SCR_SWIM_PADDLE

//*****
SCR_SWIM_JUMP:
	ACTION				ACTION_JUMP
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYROTATION
	ACTION				ACTION_IDLE
	START_MOTION		CHUCKIE_WATER_JUMP 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYROTATION

	CODE				CODE_SWIM_JUMP_IMPULSE	//jump into the air: 0 if failed, 1 if success

	START_MOTION		CHUCKIE_WATER_JUMP 7 MOTNINF_FLAG_NONE
	DELAY				0

SCR_SWIM_JUMP_LOOP:
	CODE				CODE_CLEAR_SUBMERSION
	CODE				CODE_CHECK_VERTICLE_SPEED	// 1 if going up, 0 if no verticle speed, -1 if going down
	IF_LE				SCR_SWIM_FALL				// if going down, go into fall action
	CODE_1I				CODE_BUTTONDOWN 2
	IF_SET				SCR_THROW
	DELAY				0
	JUMP				SCR_SWIM_JUMP_LOOP

SCR_SWIM_FALL:
	START_MOTION		CHUCKIE_WATER_JUMP_AIR 0 MOTNINF_FLAG_ONESHOTNOINTERP
	JUMP				SCR_FALL2



//------------------------------------------
SCR_SUCKED:
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYMOVEMENT
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION
	
	PAUSE_MOTION

SCR_SUCKED_LOOP:
	DELAY				0
	CODE				CODE_SUCKED
	JUMP				SCR_SUCKED_LOOP

//------------------------------------------
// roll behavior:
// player will tuck into a roll from a run/walk/jog
// player will roll twice and then exit into a land
// this will automatically transition back into a run/walk/jog/land
// player will continue to roll even if not on ground and if
// ending in air will transition into a fall

SCR_ROLL:
	ACTION				ACTION_ROLL
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	START_MOTION		CHUCKIE_TUMBLE_START 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_ROLL_START_LOOP:
	DELAY				0
	TEST_ENDMOTION
	IF_NOT_SET			SCR_ROLL_START_LOOP

	START_MOTION		CHUCKIE_TUMBLE 0 MOTNINF_FLAG_ONESHOTNOINTERP

SCR_ROLL_LOOP:
	DELAY				0

	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_SET				SCR_ROLL_END

	TEST_ENDMOTION		
	IF_NOT_SET			SCR_ROLL_LOOP

SCR_ROLL_END:
	CODE				CODE_CHECK_CEILING
	IF_SET				SCR_ROLL_TO_CRAWL

	START_MOTION		CHUCKIE_TUMBLE_FINISH 0 MOTNINF_FLAG_ONESHOTNOINTERP
	WAIT_FOR_FRAME		8

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_SPEED	//test speed: 0 if stopped, -1 if walking, 1 if running
	IF_EQ				SCR_LAND
	IF_LT				SCR_WALK			//test sign bit of result, set -> neative
	TEST_VALUE			2
	IF_EQ				SCR_JOG
	JUMP				SCR_RUN
	
SCR_ROLL_TO_CRAWL:
	ACTION				ACTION_CRAWL
	JUMP				SCR_CRAWL_IDLE
	

//------------------------------------------
// drive behavior:

SCR_DRIVE:
	ACTION				ACTION_DRIVE
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYMOVEMENT
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION

	START_MOTION		CHUCKIE_DRIVE 0 MOTNINF_FLAG_PROCEDURAL

SCR_DRIVE_LOOP:
	DELAY				0
	JUMP				SCR_DRIVE_LOOP


//------------------------------------------
// bubble behavior:

SCR_BUBBLE:
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	ACTION				ACTION_BUBBLE

	START_MOTION		CHUCKIE_STANDTOCRAWL 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

SCR_BUBBLE_IDLE:
	START_MOTION		CHUCKIE_CRAWL_IDLE 0 MOTNINF_FLAG_LOOP
	CLR_FLAG			ACTIONFLAG_ALT_ANIM

SCR_BUBBLE_IDLE_LOOP:
	DELAY				0

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_SPEED			//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_NE				SCR_START_BUBBLE
	CODE				CODE_CHECK_ROTATION			//test rotation: 0 if stopped, -1 if turning left, 1 if turning right
	IF_NE				SCR_BUBBLE_TURN

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET			SCR_BUBBLE_IDLE_CHANCE

	TEST_ENDMOTION									//did a bored anim just end?
	IF_SET				SCR_BUBBLE_IDLE			//restart reg idle if so
	JUMP				SCR_BUBBLE_IDLE_LOOP		//if not, then continue with bored anim

SCR_BUBBLE_IDLE_CHANCE:
//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.001				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_BUBBLE_IDLE_LOOP

//time to do a random crawl idle anim...which one? We only have one!
	START_MOTION		CHUCKIE_CRAWL_IDLE1 0 MOTNINF_FLAG_ONESHOT
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_BUBBLE_IDLE_LOOP

//*****
SCR_START_BUBBLE:
	CLR_FLAG			ACTIONFLAG_ALT_ANIM
	START_MOTION		CHUCKIE_CRAWL 0 MOTNINF_FLAG_LOOP

SCR_BUBBLE_LOOP:
	DELAY				0

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_SPEED			//test speed: 0 if stopped, -1 if walking, 1 if running, 2 if jogging
	IF_EQ				SCR_BUBBLE_IDLE
	JUMP				SCR_BUBBLE_LOOP

//*****
SCR_BUBBLE_TURN:
	START_MOTION		CHUCKIE_CRAWL_TURN 0 MOTNINF_FLAG_LOOP

SCR_BUBBLE_TURN_LOOP:									//continue turning?
	DELAY				0

	TEST_ONGROUND
	IF_NOT_SET			SCR_FALL

	CODE				CODE_CHECK_SPEED				//test speed: 0 if stopped, else moving
	IF_NE				SCR_START_BUBBLE

	CODE				CODE_CHECK_ROTATION				//test rotation: 0 if stopped, else turning
	IF_EQ				SCR_BUBBLE_IDLE
	JUMP				SCR_BUBBLE_TURN_LOOP


//------------------------------------------
// victory behavior:

SCR_VICTORY:
	ACTION				ACTION_VICTORY
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	CLR_FLAG			ACTIONFLAG_NOXZMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOYMOVEMENT
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOYROTATION
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION

	GET_RANDOM			3
	CASE				SCR_VICTORY1 SCR_VICTORY2 SCR_VICTORY3
SCR_VICTORY1:
	START_MOTION		CHUCKIE_VICTORY_HANDS_UP 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_VICTORY_END
SCR_VICTORY2:
	START_MOTION		CHUCKIE_VICTORY_FIST_UP 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_VICTORY_END
SCR_VICTORY3:
	START_MOTION		CHUCKIE_VICTORY_DOUBLE_JUMP 0 MOTNINF_FLAG_ONESHOT

SCR_VICTORY_END:
	WAIT_FOR_END
	START_MOTION		CHUCKIE_STAND 0 MOTNINF_FLAG_LOOPNOINTERP

SCR_VICTORY_ENDLESS_LOOP:
	DELAY				0
	JUMP				SCR_VICTORY_ENDLESS_LOOP

//------------------------------------------
// trapeze behavior:

SCR_TRAPEZE:
	ACTION				ACTION_TRAPEZE
	CODE_3F				CODE_SETVELXYZ 0.0 0.0 0.0
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYMOVEMENT
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION

	START_MOTION		CHUCKIE_LEDGE_GRAB 0 MOTNINF_FLAG_ONESHOT
	WAIT_FOR_END

SCR_TRAPEZE_START:
	START_MOTION		CHUCKIE_LEDGE_HANG 0 MOTNINF_FLAG_LOOPNOINTERP
	CLR_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim

SCR_TRAPEZE_LOOP:
	DELAY				0
												
	CODE_1I				CODE_BUTTONPRESSED 0
	IF_SET				SCR_TRAPEZE_JUMP

	TEST_FLAG			ACTIONFLAG_ABORT_ACTION
	IF_SET				SCR_TRAPEZE_LAND_HARD

	TEST_FLAG			ACTIONFLAG_ALT_ANIM			//a bored anim just finished, so restart regular idle anim
	IF_NOT_SET			SCR_TRAPEZE_IDLE_CHANCE

	TEST_ENDMOTION							//did an idle anim just end?
	IF_SET				SCR_TRAPEZE_START			//restart idle if so
	JUMP				SCR_TRAPEZE_LOOP

SCR_TRAPEZE_IDLE_CHANCE:
//continue idling: see if we should do some random idle anim
	TEST_RANDOM			0.01				//test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_TRAPEZE_LOOP

//time to do a random idle anim...which one?
	GET_RANDOM			3
	CASE				SCR_TRAPEZE_IDLE1 SCR_TRAPEZE_IDLE2 SCR_TRAPEZE_IDLE3
SCR_TRAPEZE_IDLE1:
	START_MOTION		CHUCKIE_LEDGE_IDLE_ADJUST 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_TRAPEZE_IDLE_END
SCR_TRAPEZE_IDLE2:
	START_MOTION		CHUCKIE_LEDGE_IDLE_LOOK_LEFT 0 MOTNINF_FLAG_ONESHOT
	JUMP				SCR_TRAPEZE_IDLE_END
SCR_TRAPEZE_IDLE3:
	START_MOTION		CHUCKIE_LEDGE_IDLE_LOOK_RIGHT 0 MOTNINF_FLAG_ONESHOT

SCR_TRAPEZE_IDLE_END:
	SET_FLAG			ACTIONFLAG_ALT_ANIM
	JUMP				SCR_TRAPEZE_LOOP

//*****
SCR_TRAPEZE_JUMP:
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	ACTION				ACTION_JUMP
	CODE				CODE_TRAPEZE_IMPULSE
	JUMP				SCR_FALL

//*****
SCR_TRAPEZE_LAND_HARD:
	CLR_FLAG			ACTIONFLAG_NO_XZ_YROT
	CLR_FLAG			ACTIONFLAG_NOGRAVITY
	CLR_FLAG			ACTIONFLAG_NOXZCOLLISION
	CLR_FLAG			ACTIONFLAG_NOYCOLLISION
	CLR_FLAG			ACTIONFLAG_ABORT_ACTION
	ACTION				ACTION_JUMP
	CODE				CODE_TRAPEZE_IMPULSE
	JUMP				SCR_FALL_HARD

//------------------------------------------
// fly behavior: used for carpet, sled, & pterry

SCR_FLY:
	START_MOTION		CHUCKIE_RIDE_MIDDLE 0 MOTNINF_FLAG_PROCEDURAL

SCR_FLY_LOOP:
	DELAY				0

	CODE				CODE_CHECK_SLED_UD
	IF_LT				SCR_FLY_DOWN
	IF_GT				SCR_FLY_UP

	JUMP				SCR_FLY_LOOP
	
//*****
SCR_FLY_DOWN:
	START_MOTION		CHUCKIE_RIDE_DOWN 0 MOTNINF_FLAG_PROCEDURAL

SCR_FLY_DOWN_LOOP:
	DELAY				0

	CODE				CODE_CHECK_SLED_UD
	IF_GT				SCR_FLY
	IF_EQ				SCR_FLY

	JUMP				SCR_FLY_DOWN_LOOP
	
//*****
SCR_FLY_UP:
	START_MOTION		CHUCKIE_RIDE_UP 0 MOTNINF_FLAG_PROCEDURAL

SCR_FLY_UP_LOOP:
	DELAY				0

	CODE				CODE_CHECK_SLED_UD
	IF_LT				SCR_FLY
	IF_EQ				SCR_FLY

	JUMP				SCR_FLY_UP_LOOP



//------------------------------------------
// get tossed into air by trampoline. this is a lot like a normal jump, but
// there is no call to CODE_JUMP_IMPULSE-- the actor just gets his upward
// velocity from the trampoline. also, we skip the bend-your-knees portion
// of the jump animation (the DAVE_JUMPBEGIN motion)
// 
// once the trampoline jump has started, we go to the normal jump's loop

SCR_TRAMPOLINE_JUMP:

	// skip DAVE_JUMPBEGIN motion, just choose a jump. if he doesn't have much upward velocity, always use
	// the regular jump motion (no flip)

	CODE					CODE_GET_Y_VELOCITY					// returns y-velocity as an integer
	IF_LE					SCR_TRAMPOLINE_NO_JUMP			// for very low velocity (< 1), don't use a jump anim at all
	TEST_VALUE			6											// threshhold velocity-- if <, use regular jump
	IF_LT					SCR_TRAMPOLINE_REGULAR_JUMP

	// randomly choose a jump animation

	TEST_RANDOM			0.6										// test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_TRAMPOLINE_CHOOSE_FLIP
	
SCR_TRAMPOLINE_REGULAR_JUMP:

	// use the regular jump anim

	START_MOTION		CHUCKIE_JUMPINAIR 0 MOTNINF_FLAG_NOINTERP
	JUMP					SCR_TRAMPOLINE_JUMP_LOOP

SCR_TRAMPOLINE_CHOOSE_FLIP:

	// not using regular jump, choose a flip animation

	TEST_RANDOM			0.5										// test random number: 0 if rand0to1() >= PARM, 1 < PARM
	IF_NOT_SET			SCR_TRAMPOLINE_TWISTING_FLIP

	// flip

	START_MOTION		CHUCKIE_JUMPINAIRB 0 MOTNINF_FLAG_NOINTERP
	JUMP				SCR_TRAMPOLINE_JUMP_LOOP

SCR_TRAMPOLINE_TWISTING_FLIP:

	// flip with a twist

	START_MOTION		CHUCKIE_JUMPINAIRC 0 MOTNINF_FLAG_NOINTERP
	JUMP				SCR_TRAMPOLINE_JUMP_LOOP

SCR_TRAMPOLINE_NO_JUMP:

	// very low velocity off the trampoline, just use the idle animation

	START_MOTION		CHUCKIE_STAND 0 MOTNINF_FLAG_LOOPNOINTERP
	JUMP				SCR_TO_IDLE

// loop to control jumper while going up in air-- a lot like normal jump loop, but no hard landing since he's on trampoline

SCR_TRAMPOLINE_JUMP_LOOP:

	CODE				CODE_CHECK_VERTICLE_SPEED			// 1 if going up, 0 if no verticle speed, -1 if going down
	IF_LE				SCR_TRAMPOLINE_FALL_LOOP		// if going down, go into fall action
	DELAY				0
	JUMP				SCR_TRAMPOLINE_JUMP_LOOP

// loop to control jumper while going down in air-- a lot like normal jump loop, but no hard landing since he's on trampoline

SCR_TRAMPOLINE_FALL_LOOP:

	DELAY				0
	CODE				CODE_AVATAR_SUBMERGED
	IF_SET				SCR_SWIM
	TEST_ONGROUND
	IF_SET				SCR_LAND
	JUMP				SCR_TRAMPOLINE_FALL_LOOP

//------------------------------------------
// saddle behavior:

SCR_SADDLE:
	ACTION				ACTION_SADDLE
	SET_FLAG			ACTIONFLAG_NOXZMOVEMENT
	SET_FLAG			ACTIONFLAG_NOYMOVEMENT
	SET_FLAG			ACTIONFLAG_NOGRAVITY
	SET_FLAG			ACTIONFLAG_NOYROTATION
	SET_FLAG			ACTIONFLAG_NOXZCOLLISION
	SET_FLAG			ACTIONFLAG_NOYCOLLISION

	START_MOTION		CHUCKIE_SADDLE 0 MOTNINF_FLAG_PROCEDURAL

SCR_SADDLE_LOOP:
	DELAY				0
	JUMP				SCR_SADDLE_LOOP

SCR_BLOWGUN:
	JUMP				SCR_TO_IDLE
