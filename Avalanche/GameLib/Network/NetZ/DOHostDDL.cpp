// DO NOT MODIFY THIS FILE, IT HAS BEEN GENERATED.
// File generated by Quazal DDL Compiler, Version 4.1 [SP2] (Build 1224.83)
// Copyright (C) 1998-2004, Quazal Technologies Inc.

#include "Network/NetworkPCH.h"
#include <NetZ.h>
#include "Network/NetZ/DOHostDDL.h"
#include "Network/NetZ/DOHost.h"
BEGIN_NAMESPACE_QUAZAL;

_DOC_ImplementSomeGeneralMethods(DOHost)
_PR_userdo_derived_impl(DOHost,DOMessageOwner);
_PR_globaldo_derived_impl(DOHost,DOMessageOwner);

_DOC_DOHost::_DOC_DOHost(qUnsignedInt32 uiClassID):
	DOClassTemplate<DOCLASS(DOHost), _DOC_DOMessageOwner>(uiClassID) {
}

bool _DOC_DOHost::IsAKindOf(DOClassID idDOCID) {
	if(DOCLASSID(DOHost) == idDOCID) return true;
	return _DOC_DOMessageOwner::IsAKindOf(idDOCID);
}
void _DOC_DOHost::DataSetsOperation(qUnsignedInt32 uiOp) {
	_DOC_DOMessageOwner::DataSetsOperation(uiOp);
	_DOC_RegisterProtocol(1,_PR_basic_update_protocol_protodecl( _DSDECL_DSSessionLock ));
	_DOC_RegisterFilter(1,_PR_upon_request_filter_filterdecl( _DSDECL_DSSessionLock ));
	_DOC_RegisterProtocol(2,_PR_basic_update_protocol_protodecl( _DSDECL_DSHostState ));
	_DOC_RegisterFilter(2,_PR_upon_request_filter_filterdecl( _DSDECL_DSHostState ));
	_DSDECL_DSSessionLock::RegisterCounters(uiOp);
	_DSDECL_DSHostState::RegisterCounters(uiOp);
};
qBool _DOC_DOHost::FormatVariableValue(const DuplicatedObject *pDO, Variable *pDataset, Variable *pVariable, NS_QUAZAL String *pstrResult) const {
	_DOC_FormatMatchingVariableValue(DOHost,d_lock);
	_DOC_FormatMatchingVariableValue(DOHost,d_state);
	return _DOC_DOMessageOwner::FormatVariableValue(pDO, pDataset, pVariable, pstrResult);
}

bool _DOC_DOHost::DispatchAction(DuplicatedObject* pDO, MethodID idMethod, Message* pMsg) {
	return _DOC_DOMessageOwner::DispatchAction(pDO, idMethod, pMsg);
}

bool _DOC_DOHost::DispatchRMCCall(CallMethodOperation* pContext) {
	return _DOC_DOMessageOwner::DispatchRMCCall(pContext);
}

bool _DOC_DOHost::DispatchRMCResult(RMCContext* pContext) {
	return _DOC_DOMessageOwner::DispatchRMCResult(pContext);
}


void _DOC_DOHost::FillDupSpacesInfo(DupSpace::Role eRole, DupSpace::ID* pArray, qUnsignedInt* puiIndex) {
	_DOC_DOMessageOwner::FillDupSpacesInfo(eRole, pArray, puiIndex);
}


_DO_DOHost::_DO_DOHost()  {_DO_InitDO(DOHost);}

_DO_ImplementSomeGeneralMethods(DOHost);



void _DO_DOHost::RegisterDatasets() {
	_DO_RegisterDataset(d_lock);
	_DO_RegisterDataset(d_state);
}

void _DO_DOHost::SpecificAddDSToDiscoveryMessage(Message* pMsg, Station* pStation) {
	_DO_DSAddToDiscovery(d_lock,pStation,1);
	_DO_DSAddToDiscovery(d_state,pStation,2);
	DOMessageOwner::SpecificAddDSToDiscoveryMessage(pMsg, pStation);
}

void _DO_DOHost::SpecificExtractDSFromDiscoveryMessage(Message* pMsg) {
	_DO_DSExtractFromDiscovery(d_lock,1);
	_DO_DSExtractFromDiscovery(d_state,2);
	DOMessageOwner::SpecificExtractDSFromDiscoveryMessage(pMsg);
}

void _DO_DOHost::CallOperationOnDatasets(DOOperation* pOperation, Operation::Event eEvent) {
	_DO_CallOperationOnDataset(d_lock,1);
	_DO_CallOperationOnDataset(d_state,2);
	DOMessageOwner::CallOperationOnDatasets(pOperation,eEvent);
}

bool _DO_DOHost::SpecificUpdate(DataSet *pDataset, const Time& tUpdateTime) {
	_DO_DatasetUpdate(d_lock,1);
	_DO_DatasetUpdate(d_state,2);
	return DOMessageOwner::SpecificUpdate(pDataset, tUpdateTime);
}

bool _DO_DOHost::SpecificRefresh(DataSet *pDataset, const Time& tRefreshTime) {
	_DO_DataSetRefresh(d_lock);
	_DO_DataSetRefresh(d_state);
	return DOMessageOwner::SpecificRefresh(pDataset, tRefreshTime);
}

bool _DO_DOHost::SpecificExtractADataset(Message* pMsg, qByte byDatasetIndex) { 

	switch (byDatasetIndex) {
		_DO_DSExtract(d_lock,1);
		_DO_DSExtract(d_state,2);
	}
	return DOMessageOwner::SpecificExtractADataset(pMsg, byDatasetIndex);
}

END_NAMESPACE_QUAZAL;
