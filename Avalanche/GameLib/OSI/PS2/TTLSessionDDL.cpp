// DO NOT MODIFY THIS FILE, IT HAS BEEN GENERATED.
// File generated by Quazal DDL Compiler, Version 4.1 [SP2] (Build 1224.83)
// Copyright (C) 1998-2004, Quazal Technologies Inc.

#include "OSI/PS2/TTLSessionDDL.h"

BEGIN_NAMESPACE_QUAZAL;

const DDLCLASS(TTLSession) & DDLCLASS(TTLSession)::operator=(const DDLCLASS(TTLSession) &oOther){
    levelName = oOther.levelName;
    levelIndex = oOther.levelIndex;
    gameType = oOther.gameType;
    timeLimit = oOther.timeLimit;
    scoreLimit = oOther.scoreLimit;
    tagLimit = oOther.tagLimit;
    bestOfSeries = oOther.bestOfSeries;
    maxPlayers = oOther.maxPlayers;
    reservedPlayers = oOther.reservedPlayers;
    totalConnectedPlayers = oOther.totalConnectedPlayers;
    isCustomQuery = oOther.isCustomQuery;
    isRanked = oOther.isRanked;
    isPrivate = oOther.isPrivate;
    playersRespawn = oOther.playersRespawn;
    friendlyFire = oOther.friendlyFire;
    apprehension = oOther.apprehension;
    arcadeDamage = oOther.arcadeDamage;
    selfDamage = oOther.selfDamage;
    alternatingTeams = oOther.alternatingTeams;
    return *this;
}

qBool DDLCLASS(TTLSession)::operator==(const DDLCLASS(TTLSession) &oOther) const {
    if (!(levelName == oOther.levelName)) {return false;}
    if (!(levelIndex == oOther.levelIndex)) {return false;}
    if (!(gameType == oOther.gameType)) {return false;}
    if (!(timeLimit == oOther.timeLimit)) {return false;}
    if (!(scoreLimit == oOther.scoreLimit)) {return false;}
    if (!(tagLimit == oOther.tagLimit)) {return false;}
    if (!(bestOfSeries == oOther.bestOfSeries)) {return false;}
    if (!(maxPlayers == oOther.maxPlayers)) {return false;}
    if (!(reservedPlayers == oOther.reservedPlayers)) {return false;}
    if (!(totalConnectedPlayers == oOther.totalConnectedPlayers)) {return false;}
    if (!(isCustomQuery == oOther.isCustomQuery)) {return false;}
    if (!(isRanked == oOther.isRanked)) {return false;}
    if (!(isPrivate == oOther.isPrivate)) {return false;}
    if (!(playersRespawn == oOther.playersRespawn)) {return false;}
    if (!(friendlyFire == oOther.friendlyFire)) {return false;}
    if (!(apprehension == oOther.apprehension)) {return false;}
    if (!(arcadeDamage == oOther.arcadeDamage)) {return false;}
    if (!(selfDamage == oOther.selfDamage)) {return false;}
    if (!(alternatingTeams == oOther.alternatingTeams)) {return false;}
    return true;
}

void DDLCLASS(TTLSession)::Add(Message *pMessageToSend, const DDLCLASS(TTLSession) &oValue) {
    Gathering::Add(pMessageToSend,oValue);
    DDLTYPE(string)::Add(pMessageToSend, oValue.levelName);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.levelIndex);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.gameType);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.timeLimit);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.scoreLimit);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.tagLimit);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.bestOfSeries);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.maxPlayers);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.reservedPlayers);
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.totalConnectedPlayers);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.isCustomQuery);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.isRanked);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.isPrivate);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.playersRespawn);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.friendlyFire);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.apprehension);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.arcadeDamage);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.selfDamage);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.alternatingTeams);
};

void DDLCLASS(TTLSession)::Extract(Message *pReceivedMessage, DDLCLASS(TTLSession) *pValue) {
    Gathering::Extract(pReceivedMessage,pValue);
    DDLTYPE(string)::Extract(pReceivedMessage, &pValue->levelName);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->levelIndex);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->gameType);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->timeLimit);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->scoreLimit);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->tagLimit);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->bestOfSeries);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->maxPlayers);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->reservedPlayers);
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->totalConnectedPlayers);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->isCustomQuery);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->isRanked);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->isPrivate);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->playersRespawn);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->friendlyFire);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->apprehension);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->arcadeDamage);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->selfDamage);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->alternatingTeams);
};

_PR_gathering_methods_derived_impl(TTLSession,Gathering);
END_NAMESPACE_QUAZAL;
