// DO NOT MODIFY THIS FILE, IT HAS BEEN GENERATED.
// File generated by Quazal DDL Compiler, Version 4.1 [SP2] (Build 1224.83)
// Copyright (C) 1998-2004, Quazal Technologies Inc.

#include "TTLPCH.h"
#include <NetZ.h>
#include "NetZTTL/DORefereeDDL.h"
#include "NetZTTL/DOReferee.h"
BEGIN_NAMESPACE_QUAZAL;

_DOC_ImplementSomeGeneralMethods(DOReferee)
_PR_userdo_derived_impl(DOReferee,DOMessageOwner);
_PR_globaldo_derived_impl(DOReferee,DOMessageOwner);

_DOC_DOReferee::_DOC_DOReferee(qUnsignedInt32 uiClassID):
	DOClassTemplate<DOCLASS(DOReferee), _DOC_DOMessageOwner>(uiClassID) {
}

bool _DOC_DOReferee::IsAKindOf(DOClassID idDOCID) {
	if(DOCLASSID(DOReferee) == idDOCID) return true;
	return _DOC_DOMessageOwner::IsAKindOf(idDOCID);
}
void _DOC_DOReferee::DataSetsOperation(qUnsignedInt32 uiOp) {
	_DOC_DOMessageOwner::DataSetsOperation(uiOp);
	_DOC_RegisterProtocol(1,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereeAssignment ));
	_DOC_RegisterFilter(1,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereeAssignment ));
	_DOC_RegisterProtocol(2,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereeId ));
	_DOC_RegisterFilter(2,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereeId ));
	_DOC_RegisterProtocol(3,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereeMatch ));
	_DOC_RegisterFilter(3,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereeMatch ));
	_DOC_RegisterProtocol(4,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereePhase ));
	_DOC_RegisterFilter(4,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereePhase ));
	_DOC_RegisterProtocol(5,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereePopulate ));
	_DOC_RegisterFilter(5,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereePopulate ));
	_DOC_RegisterProtocol(6,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereeRound ));
	_DOC_RegisterFilter(6,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereeRound ));
	_DOC_RegisterProtocol(7,_PR_basic_update_protocol_protodecl( _DSDECL_DSRefereeRules ));
	_DOC_RegisterFilter(7,_PR_upon_request_filter_filterdecl( _DSDECL_DSRefereeRules ));
	_DOC_RegisterProtocol(8,_PR_basic_update_protocol_protodecl( _DSDECL_DSBuffer ));
	_DOC_RegisterFilter(8,_PR_upon_request_filter_filterdecl( _DSDECL_DSBuffer ));
	_DOC_RegisterProtocol(9,_PR_basic_update_protocol_protodecl( _DSDECL_DSScoringPlayerInfo ));
	_DOC_RegisterFilter(9,_PR_upon_request_filter_filterdecl( _DSDECL_DSScoringPlayerInfo ));
	_DOC_RegisterProtocol(10,_PR_basic_update_protocol_protodecl( _DSDECL_DSSession ));
	_DOC_RegisterFilter(10,_PR_upon_request_filter_filterdecl( _DSDECL_DSSession ));
	_DOC_RegisterProtocol(11,_PR_basic_update_protocol_protodecl( _DSDECL_DSTeams ));
	_DOC_RegisterFilter(11,_PR_upon_request_filter_filterdecl( _DSDECL_DSTeams ));
	_DSDECL_DSRefereeAssignment::RegisterCounters(uiOp);
	_DSDECL_DSRefereeId::RegisterCounters(uiOp);
	_DSDECL_DSRefereeMatch::RegisterCounters(uiOp);
	_DSDECL_DSRefereePhase::RegisterCounters(uiOp);
	_DSDECL_DSRefereePopulate::RegisterCounters(uiOp);
	_DSDECL_DSRefereeRound::RegisterCounters(uiOp);
	_DSDECL_DSRefereeRules::RegisterCounters(uiOp);
	_DSDECL_DSBuffer::RegisterCounters(uiOp);
	_DSDECL_DSScoringPlayerInfo::RegisterCounters(uiOp);
	_DSDECL_DSSession::RegisterCounters(uiOp);
	_DSDECL_DSTeams::RegisterCounters(uiOp);
};
qBool _DOC_DOReferee::FormatVariableValue(const DuplicatedObject *pDO, Variable *pDataset, Variable *pVariable, NS_QUAZAL String *pstrResult) const {
	_DOC_FormatMatchingVariableValue(DOReferee,d_assignment);
	_DOC_FormatMatchingVariableValue(DOReferee,d_id);
	_DOC_FormatMatchingVariableValue(DOReferee,d_match);
	_DOC_FormatMatchingVariableValue(DOReferee,d_nextPhase);
	_DOC_FormatMatchingVariableValue(DOReferee,d_populate);
	_DOC_FormatMatchingVariableValue(DOReferee,d_round);
	_DOC_FormatMatchingVariableValue(DOReferee,d_rules);
	_DOC_FormatMatchingVariableValue(DOReferee,d_score);
	_DOC_FormatMatchingVariableValue(DOReferee,d_scoringPlayerInfo);
	_DOC_FormatMatchingVariableValue(DOReferee,d_session);
	_DOC_FormatMatchingVariableValue(DOReferee,d_teams);
	return _DOC_DOMessageOwner::FormatVariableValue(pDO, pDataset, pVariable, pstrResult);
}

bool _DOC_DOReferee::DispatchAction(DuplicatedObject* pDO, MethodID idMethod, Message* pMsg) {
	return _DOC_DOMessageOwner::DispatchAction(pDO, idMethod, pMsg);
}

bool _DOC_DOReferee::DispatchRMCCall(CallMethodOperation* pContext) {
	return _DOC_DOMessageOwner::DispatchRMCCall(pContext);
}

bool _DOC_DOReferee::DispatchRMCResult(RMCContext* pContext) {
	return _DOC_DOMessageOwner::DispatchRMCResult(pContext);
}


void _DOC_DOReferee::FillDupSpacesInfo(DupSpace::Role eRole, DupSpace::ID* pArray, qUnsignedInt* puiIndex) {
	_DOC_DOMessageOwner::FillDupSpacesInfo(eRole, pArray, puiIndex);
}


_DO_DOReferee::_DO_DOReferee()  {_DO_InitDO(DOReferee);}

_DO_ImplementSomeGeneralMethods(DOReferee);



void _DO_DOReferee::RegisterDatasets() {
	_DO_RegisterDataset(d_assignment);
	_DO_RegisterDataset(d_id);
	_DO_RegisterDataset(d_match);
	_DO_RegisterDataset(d_nextPhase);
	_DO_RegisterDataset(d_populate);
	_DO_RegisterDataset(d_round);
	_DO_RegisterDataset(d_rules);
	_DO_RegisterDataset(d_score);
	_DO_RegisterDataset(d_scoringPlayerInfo);
	_DO_RegisterDataset(d_session);
	_DO_RegisterDataset(d_teams);
}

void _DO_DOReferee::SpecificAddDSToDiscoveryMessage(Message* pMsg, Station* pStation) {
	_DO_DSAddToDiscovery(d_assignment,pStation,1);
	_DO_DSAddToDiscovery(d_id,pStation,2);
	_DO_DSAddToDiscovery(d_match,pStation,3);
	_DO_DSAddToDiscovery(d_nextPhase,pStation,4);
	_DO_DSAddToDiscovery(d_populate,pStation,5);
	_DO_DSAddToDiscovery(d_round,pStation,6);
	_DO_DSAddToDiscovery(d_rules,pStation,7);
	_DO_DSAddToDiscovery(d_score,pStation,8);
	_DO_DSAddToDiscovery(d_scoringPlayerInfo,pStation,9);
	_DO_DSAddToDiscovery(d_session,pStation,10);
	_DO_DSAddToDiscovery(d_teams,pStation,11);
	DOMessageOwner::SpecificAddDSToDiscoveryMessage(pMsg, pStation);
}

void _DO_DOReferee::SpecificExtractDSFromDiscoveryMessage(Message* pMsg) {
	_DO_DSExtractFromDiscovery(d_assignment,1);
	_DO_DSExtractFromDiscovery(d_id,2);
	_DO_DSExtractFromDiscovery(d_match,3);
	_DO_DSExtractFromDiscovery(d_nextPhase,4);
	_DO_DSExtractFromDiscovery(d_populate,5);
	_DO_DSExtractFromDiscovery(d_round,6);
	_DO_DSExtractFromDiscovery(d_rules,7);
	_DO_DSExtractFromDiscovery(d_score,8);
	_DO_DSExtractFromDiscovery(d_scoringPlayerInfo,9);
	_DO_DSExtractFromDiscovery(d_session,10);
	_DO_DSExtractFromDiscovery(d_teams,11);
	DOMessageOwner::SpecificExtractDSFromDiscoveryMessage(pMsg);
}

void _DO_DOReferee::CallOperationOnDatasets(DOOperation* pOperation, Operation::Event eEvent) {
	_DO_CallOperationOnDataset(d_assignment,1);
	_DO_CallOperationOnDataset(d_id,2);
	_DO_CallOperationOnDataset(d_match,3);
	_DO_CallOperationOnDataset(d_nextPhase,4);
	_DO_CallOperationOnDataset(d_populate,5);
	_DO_CallOperationOnDataset(d_round,6);
	_DO_CallOperationOnDataset(d_rules,7);
	_DO_CallOperationOnDataset(d_score,8);
	_DO_CallOperationOnDataset(d_scoringPlayerInfo,9);
	_DO_CallOperationOnDataset(d_session,10);
	_DO_CallOperationOnDataset(d_teams,11);
	DOMessageOwner::CallOperationOnDatasets(pOperation,eEvent);
}

bool _DO_DOReferee::SpecificUpdate(DataSet *pDataset, const Time& tUpdateTime) {
	_DO_DatasetUpdate(d_assignment,1);
	_DO_DatasetUpdate(d_id,2);
	_DO_DatasetUpdate(d_match,3);
	_DO_DatasetUpdate(d_nextPhase,4);
	_DO_DatasetUpdate(d_populate,5);
	_DO_DatasetUpdate(d_round,6);
	_DO_DatasetUpdate(d_rules,7);
	_DO_DatasetUpdate(d_score,8);
	_DO_DatasetUpdate(d_scoringPlayerInfo,9);
	_DO_DatasetUpdate(d_session,10);
	_DO_DatasetUpdate(d_teams,11);
	return DOMessageOwner::SpecificUpdate(pDataset, tUpdateTime);
}

bool _DO_DOReferee::SpecificRefresh(DataSet *pDataset, const Time& tRefreshTime) {
	_DO_DataSetRefresh(d_assignment);
	_DO_DataSetRefresh(d_id);
	_DO_DataSetRefresh(d_match);
	_DO_DataSetRefresh(d_nextPhase);
	_DO_DataSetRefresh(d_populate);
	_DO_DataSetRefresh(d_round);
	_DO_DataSetRefresh(d_rules);
	_DO_DataSetRefresh(d_score);
	_DO_DataSetRefresh(d_scoringPlayerInfo);
	_DO_DataSetRefresh(d_session);
	_DO_DataSetRefresh(d_teams);
	return DOMessageOwner::SpecificRefresh(pDataset, tRefreshTime);
}

bool _DO_DOReferee::SpecificExtractADataset(Message* pMsg, qByte byDatasetIndex) { 

	switch (byDatasetIndex) {
		_DO_DSExtract(d_assignment,1);
		_DO_DSExtract(d_id,2);
		_DO_DSExtract(d_match,3);
		_DO_DSExtract(d_nextPhase,4);
		_DO_DSExtract(d_populate,5);
		_DO_DSExtract(d_round,6);
		_DO_DSExtract(d_rules,7);
		_DO_DSExtract(d_score,8);
		_DO_DSExtract(d_scoringPlayerInfo,9);
		_DO_DSExtract(d_session,10);
		_DO_DSExtract(d_teams,11);
	}
	return DOMessageOwner::SpecificExtractADataset(pMsg, byDatasetIndex);
}

END_NAMESPACE_QUAZAL;
