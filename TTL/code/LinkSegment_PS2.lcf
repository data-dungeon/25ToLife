#	===========================================================================
#		LinkSegment_PS2.lcf	©1999-2000 Metrowerks Inc. All rights reserved.
#	===========================================================================
#		
#		linker command file for PS2
#		
#		06/09/2000	kashima,	put dummy nop after .text section
#		06/09/2000	kashima,	change default entry address
#		02/10/2000	kashima,	add ALIGNALL before each section
#		01/15/2000	kashima,	support overlay by lcf generator
#		11/03/1999	kashima,	for SDK 1.10
#		10/22/1999	kashima,	change file extention from txt to lcf
#		10/20/1999	kashima,	put all sections into main
#		10/12/1999	kashima,	separate each sections
#		09/14/1999	kashima,	
#		
#	===========================================================================

MEMORY
{
	main	(RWX)	: ORIGIN = 0x100000,	LENGTH = 0x0
	heap	(RW)	: ORIGIN = AFTER(main),	LENGTH = 0x0
	scratchpad (RW) : ORIGIN = 0x70000000,	LENGTH = 0x4000
}

#FORCE_ACTIVE
#{
#}

KEEP_SECTION
{
	.vutext,
	.vudata,
	.vubss
}

#REF_INCLUDE
#{

SECTIONS
{
		#	define for crt0

		_heap_size = -1;

		# ned says: according to dave ross, there is some argument about whether the _stack setting must be explicit
		# on a cdrom version for retail release. a value of -1 should set it to the end of physical memory, whatever
		# that memory size is. food says that this should work on a retail release

		_stack = -1;

		# ned says: we've looked at stack high water mark to get a rough value for this. i found about 20k usage,
		# and it was much lower during game play-- the high water mark was set during loading a level. so we'll be
		# conservative and allocate 64k

		_stack_size = 0x00010000;

		#	define for lcf

		_align_segment	= 0x80;

	.main	:
	{
		#	text sections
		.	= ALIGN(0x80);
		crt0.o	(.text)
		.	= ALIGN(0x10);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.text)
		WRITEW	0x0;	# text section patch for EE pipeline
		WRITEW	0x0;	# text section patch for EE pipeline
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.vutext)

		#	.reginfo
		crt0.o	(.reginfo)

		#	data sections
		__data_start	= .;
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.data)
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.vudata)
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.rodata)
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.rdata)

		#	static initializers
		.	= ALIGN(0x10);
		ALIGNALL(0x4);
		GROUP(ROOT)	(.init)
		.	= ALIGN(0x10);
		ALIGNALL(0x4);
		__static_init	= .;
		GROUP(ROOT)	(.ctor)
		__static_init_end	= .;

		#	.vtables
		.	= ALIGN(0x10);
		ALIGNALL(0x4);
		*	(.vtables)

		#	exception table
		.	= ALIGN(0x10);
		__exception_table_start__	= .;
		__exception_table_end__	= .;

		#	addresses for each overlay module
		.	= ALIGN(0x10);
		_overlay_group_addresses	= .;
		WRITEW ADDR(.main);	#

		__data_end	= .;
		__data_size	= __data_end - __data_start;

		#	the address of gp register
		_gp	= ALIGN(128) + 0x7FF0;

		#	literal
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		LITERAL

		#	small data sections
		.	= ALIGN(0x80);
		ALIGNALL(0x4);
		*	(.sdata)
		.	= ALIGN(0x80);
		_fbss	= .;
		ALIGNALL(0x4);
		*	(.sbss)
		ALIGNALL(0x4);
		*	(.scommon)
		ALIGNALL(0x4);
		*	(SCOMMON)

		#	bss sections
		__bss_start	= .;
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.bss)
		ALIGNALL(0x8);
		GROUP(ROOT)	(.common)
		ALIGNALL(0x8);
		GROUP(ROOT)	(COMMON)
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		GROUP(ROOT)	(.vubss)
		ALIGNALL(0x8);
		__bss_end	= .;
		__bss_size	= __bss_end - __bss_start;

		.	= ALIGN(_align_segment);

	}	>	main

	.heap	:
	{
		#	to get the address for heap
		end	= .;
		_end	= .;
	}	>	heap


	# ned says: this is for putting variables on the scratchpad, as instructed by joe sullivan at metrowerks

	.scratchpad :
	{
# uncomment this line to use the codewarrior profiler. see copy of 5/8/03 e-mail below
#		WRITEW 0x0;
		GROUP(ROOT) (.spad_bss)
		ALIGNALL(0x10);
	} > scratchpad
}

#	===========================================================================
#		end of lcf	(auto-generated by pre-linker for PS2)
#	===========================================================================

##################################################
# e-mail from metrowerks support 5/8/03
##################################################
#
#Hi Ned;
#This error is caused by the scratchpad section not being initialized to any value...and can be solved by either of two methods:
#
#1) Change this line in "main.c" from this:
#
#    __declspec(scratchpad) int count;
#
#to this:
#
#    __declspec(scratchpad) int count = 1;
#
#and also change the LCF file scratchpad entry from this:
#
#    .scratchpad :
#    {
#    * (.spad_bss)
#    } > scratchpad
#
#to this:
#
#    .scratchpad :
#    {
#    * (.spad_data)
#    * (.spad_bss)
#    } > scratchpad
#
#
#2) Or, this will work too.  Do not make any of the changes in 1).  Instead, just change the scratchpad entry in the LCF file to this:
#
#    .scratchpad :
#    {
#    WRITEW 0x0;
#    * (.spad_bss)
#    } > scratchpad
#
#
#The second work-around wastes 4 bytes of space in the scratchpad, but only requires a single change to the LCF file.  The first work-around does not waste any space, but requires the user to change the program slightly.
#
#Product :	CW-CATS1PS2__Each
#Description :	Trying to instrument an application in the Hierarchical Profiler produces
#the following error message:
#
#-------------------- Instrumenting ---------------
#Error: Unable to open file 'C:\Dev\BigJuju\PS2Direct_Debug\scratchpad'.
#Unable to open C:\Dev\BigJuju\PS2Direct_Debug\BigJujuDebug.elf for
#instrumentation
#Instrumentation failed
#---------------- Performing Cleanup ------------
#Cleanup Finished Successfully
#
#This is new behavior (from about a month ago when I last ran the profiler).
#I don't know what "scratchpad" file it is looking for, or how to create one.
#Please help!
#
#Ned Martin
#Avalanche Software
###############################################################
