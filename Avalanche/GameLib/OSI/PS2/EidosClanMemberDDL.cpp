// DO NOT MODIFY THIS FILE, IT HAS BEEN GENERATED.
// File generated by Quazal DDL Compiler, Version 4.1 [SP2] (Build 1224.83)
// Copyright (C) 1998-2004, Quazal Technologies Inc.

#include "OSI/PS2/EidosClanMemberDDL.h"

BEGIN_NAMESPACE_QUAZAL;

const DDLCLASS(EidosClanMember) & DDLCLASS(EidosClanMember)::operator=(const DDLCLASS(EidosClanMember) &oOther){
    m_PlayerID = oOther.m_PlayerID;
    m_Player = oOther.m_Player;
    m_ClanAbbr = oOther.m_ClanAbbr;
    m_ClanIsLeader = oOther.m_ClanIsLeader;
    m_ClanIsOfficer = oOther.m_ClanIsOfficer;
    m_IsAcceptingInvites = oOther.m_IsAcceptingInvites;
    m_NetLobbyMatch = oOther.m_NetLobbyMatch;
    m_IsFriend = oOther.m_IsFriend;
    m_IsOnline = oOther.m_IsOnline;
    return *this;
}

qBool DDLCLASS(EidosClanMember)::operator==(const DDLCLASS(EidosClanMember) &oOther) const {
    if (!(m_PlayerID == oOther.m_PlayerID)) {return false;}
    if (!(m_Player == oOther.m_Player)) {return false;}
    if (!(m_ClanAbbr == oOther.m_ClanAbbr)) {return false;}
    if (!(m_ClanIsLeader == oOther.m_ClanIsLeader)) {return false;}
    if (!(m_ClanIsOfficer == oOther.m_ClanIsOfficer)) {return false;}
    if (!(m_IsAcceptingInvites == oOther.m_IsAcceptingInvites)) {return false;}
    if (!(m_NetLobbyMatch == oOther.m_NetLobbyMatch)) {return false;}
    if (!(m_IsFriend == oOther.m_IsFriend)) {return false;}
    if (!(m_IsOnline == oOther.m_IsOnline)) {return false;}
    return true;
}

void DDLCLASS(EidosClanMember)::Add(Message *pMessageToSend, const DDLCLASS(EidosClanMember) &oValue) {
    DDLTYPE(uint32)::Add(pMessageToSend, oValue.m_PlayerID);
    DDLTYPE(string)::Add(pMessageToSend, oValue.m_Player);
    DDLTYPE(string)::Add(pMessageToSend, oValue.m_ClanAbbr);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.m_ClanIsLeader);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.m_ClanIsOfficer);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.m_IsAcceptingInvites);
    DDLTYPE(std_list)< DDLTYPE(any)< CLASSMETATYPE(Gathering), DDLTYPE(string) > >::Add(pMessageToSend, oValue.m_NetLobbyMatch);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.m_IsFriend);
    DDLTYPE(bool)::Add(pMessageToSend, oValue.m_IsOnline);
};

void DDLCLASS(EidosClanMember)::Extract(Message *pReceivedMessage, DDLCLASS(EidosClanMember) *pValue) {
    DDLTYPE(uint32)::Extract(pReceivedMessage, &pValue->m_PlayerID);
    DDLTYPE(string)::Extract(pReceivedMessage, &pValue->m_Player);
    DDLTYPE(string)::Extract(pReceivedMessage, &pValue->m_ClanAbbr);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->m_ClanIsLeader);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->m_ClanIsOfficer);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->m_IsAcceptingInvites);
    DDLTYPE(std_list)< DDLTYPE(any)< CLASSMETATYPE(Gathering), DDLTYPE(string) > >::Extract(pReceivedMessage, &pValue->m_NetLobbyMatch);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->m_IsFriend);
    DDLTYPE(bool)::Extract(pReceivedMessage, &pValue->m_IsOnline);
};

END_NAMESPACE_QUAZAL;
