// DO NOT MODIFY THIS FILE, IT HAS BEEN GENERATED.
// File generated by Quazal DDL Compiler, Version 4.1 [SP2] (Build 1224.83)
// Copyright (C) 1998-2004, Quazal Technologies Inc.

#include "Network/NetworkPCH.h"
#include <NetZ.h>
#include "Network/NetZ/DOMessageOwnerDDL.h"
#include "Network/NetZ/DOMessageOwner.h"
BEGIN_NAMESPACE_QUAZAL;

_DOC_ImplementSomeGeneralMethods(DOMessageOwner)
_PR_userdo_derived_impl(DOMessageOwner,RootDO);
_PR_globaldo_derived_impl(DOMessageOwner,RootDO);

_DOC_DOMessageOwner::_DOC_DOMessageOwner(qUnsignedInt32 uiClassID):
	DOClassTemplate<DOCLASS(DOMessageOwner), _DOC_ROOT_ROOTDO>(uiClassID) {
	_DOC_InitRMC(PostBuffer);
	_DOC_InitRMC(PostFlag);
	_DOC_InitRMC(SendBuffer);
	_DOC_InitRMC(SendFlag);
}

bool _DOC_DOMessageOwner::IsAKindOf(DOClassID idDOCID) {
	if(DOCLASSID(DOMessageOwner) == idDOCID) return true;
	return _DOC_ROOT_ROOTDO::IsAKindOf(idDOCID);
}
void _DOC_DOMessageOwner::DataSetsOperation(qUnsignedInt32 uiOp) {
	_DOC_ROOT_ROOTDO::DataSetsOperation(uiOp);
};
qBool _DOC_DOMessageOwner::FormatVariableValue(const DuplicatedObject *pDO, Variable *pDataset, Variable *pVariable, NS_QUAZAL String *pstrResult) const {
	return _DOC_ROOT_ROOTDO::FormatVariableValue(pDO, pDataset, pVariable, pstrResult);
}

bool _DOC_DOMessageOwner::DispatchAction(DuplicatedObject* pDO, MethodID idMethod, Message* pMsg) {
	return _DOC_ROOT_ROOTDO::DispatchAction(pDO, idMethod, pMsg);
}

bool _DOC_DOMessageOwner::DispatchRMCCall(CallMethodOperation* pContext) {
	_DOC_DispatchRMCCall(PostBuffer,_DO_DOMessageOwner);
	_DOC_DispatchRMCCall(PostFlag,_DO_DOMessageOwner);
	_DOC_DispatchRMCCall(SendBuffer,_DO_DOMessageOwner);
	_DOC_DispatchRMCCall(SendFlag,_DO_DOMessageOwner);
	return _DOC_ROOT_ROOTDO::DispatchRMCCall(pContext);
}

bool _DOC_DOMessageOwner::DispatchRMCResult(RMCContext* pContext) {
	_DOC_DispatchRMCResult(PostBuffer,_DO_DOMessageOwner);
	_DOC_DispatchRMCResult(PostFlag,_DO_DOMessageOwner);
	_DOC_DispatchRMCResult(SendBuffer,_DO_DOMessageOwner);
	_DOC_DispatchRMCResult(SendFlag,_DO_DOMessageOwner);
	return _DOC_ROOT_ROOTDO::DispatchRMCResult(pContext);
}


void _DOC_DOMessageOwner::FillDupSpacesInfo(DupSpace::Role eRole, DupSpace::ID* pArray, qUnsignedInt* puiIndex) {
	_DOC_ROOT_ROOTDO::FillDupSpacesInfo(eRole, pArray, puiIndex);
}


_DO_DOMessageOwner::_DO_DOMessageOwner()  {_DO_InitDO(DOMessageOwner);}

_DO_ImplementSomeGeneralMethods(DOMessageOwner);



void _DO_DOMessageOwner::RegisterDatasets() {
}

void _DO_DOMessageOwner::SpecificAddDSToDiscoveryMessage(Message* pMsg, Station* pStation) {
	ROOT_ROOTDO::SpecificAddDSToDiscoveryMessage(pMsg, pStation);
}

void _DO_DOMessageOwner::SpecificExtractDSFromDiscoveryMessage(Message* pMsg) {
	ROOT_ROOTDO::SpecificExtractDSFromDiscoveryMessage(pMsg);
}

void _DO_DOMessageOwner::CallOperationOnDatasets(DOOperation* pOperation, Operation::Event eEvent) {
	ROOT_ROOTDO::CallOperationOnDatasets(pOperation,eEvent);
}

bool _DO_DOMessageOwner::SpecificUpdate(DataSet *pDataset, const Time& tUpdateTime) {
	return ROOT_ROOTDO::SpecificUpdate(pDataset, tUpdateTime);
}

bool _DO_DOMessageOwner::SpecificRefresh(DataSet *pDataset, const Time& tRefreshTime) {
	return ROOT_ROOTDO::SpecificRefresh(pDataset, tRefreshTime);
}

bool _DO_DOMessageOwner::SpecificExtractADataset(Message* pMsg, qByte byDatasetIndex) { 
	return ROOT_ROOTDO::SpecificExtractADataset(pMsg, byDatasetIndex);
}


bool _DO_DOMessageOwner::CallPostBuffer(RMCContext* pContext, const DDLTYPE(uint32)::CPPType& i_hash, const DDLTYPE(buffer)::CPPType& i_data, const DDLTYPE(dohandle)::CPPType& i_sender) {
    _DO_RMC_InitCall(PostBuffer);
    _MSG_ADD_VARIABLE(TPostBuffer_i_hash, i_hash);
    _MSG_ADD_VARIABLE(TPostBuffer_i_data, i_data);
    _MSG_ADD_VARIABLE(TPostBuffer_i_sender, i_sender);
    _DO_RMC_CompleteCall();
}

void _DO_DOMessageOwner::PostBufferWrapper(CallMethodOperation* pContext) { 
    _DO_RMC_InitWrapper();
    DDLTYPE(uint32)::CPPType i_hash;
    _MSG_EXTRACT_VARIABLE(TPostBuffer_i_hash, i_hash);
    DDLTYPE(buffer)::CPPType i_data;
    _MSG_EXTRACT_VARIABLE(TPostBuffer_i_data, i_data);
    DDLTYPE(dohandle)::CPPType i_sender;
    _MSG_EXTRACT_VARIABLE(TPostBuffer_i_sender, i_sender);
    ((DOMessageOwner*)this)->PostBuffer(i_hash, i_data, i_sender);
    _DO_RMC_PrepareReturn();
    _DO_RMC_CompleteWrapper();
}

void _DO_DOMessageOwner::PostBufferReturnStub(RMCContext* pContext) { 
    _DO_RMC_InitReturnStub();
    _DO_RMC_DummyParam();
}

bool _DO_DOMessageOwner::CallPostFlag(RMCContext* pContext, const DDLTYPE(uint32)::CPPType& i_hash, const DDLTYPE(dohandle)::CPPType& i_sender) {
    _DO_RMC_InitCall(PostFlag);
    _MSG_ADD_VARIABLE(TPostFlag_i_hash, i_hash);
    _MSG_ADD_VARIABLE(TPostFlag_i_sender, i_sender);
    _DO_RMC_CompleteCall();
}

void _DO_DOMessageOwner::PostFlagWrapper(CallMethodOperation* pContext) { 
    _DO_RMC_InitWrapper();
    DDLTYPE(uint32)::CPPType i_hash;
    _MSG_EXTRACT_VARIABLE(TPostFlag_i_hash, i_hash);
    DDLTYPE(dohandle)::CPPType i_sender;
    _MSG_EXTRACT_VARIABLE(TPostFlag_i_sender, i_sender);
    ((DOMessageOwner*)this)->PostFlag(i_hash, i_sender);
    _DO_RMC_PrepareReturn();
    _DO_RMC_CompleteWrapper();
}

void _DO_DOMessageOwner::PostFlagReturnStub(RMCContext* pContext) { 
    _DO_RMC_InitReturnStub();
    _DO_RMC_DummyParam();
}

bool _DO_DOMessageOwner::CallSendBuffer(RMCContext* pContext, const DDLTYPE(uint32)::CPPType& i_hash, const DDLTYPE(buffer)::CPPType& i_data, const DDLTYPE(dohandle)::CPPType& i_sender) {
    _DO_RMC_InitCall(SendBuffer);
    _MSG_ADD_VARIABLE(TSendBuffer_i_hash, i_hash);
    _MSG_ADD_VARIABLE(TSendBuffer_i_data, i_data);
    _MSG_ADD_VARIABLE(TSendBuffer_i_sender, i_sender);
    _DO_RMC_CompleteCall();
}

void _DO_DOMessageOwner::SendBufferWrapper(CallMethodOperation* pContext) { 
    _DO_RMC_InitWrapper();
    DDLTYPE(uint32)::CPPType i_hash;
    _MSG_EXTRACT_VARIABLE(TSendBuffer_i_hash, i_hash);
    DDLTYPE(buffer)::CPPType i_data;
    _MSG_EXTRACT_VARIABLE(TSendBuffer_i_data, i_data);
    DDLTYPE(dohandle)::CPPType i_sender;
    _MSG_EXTRACT_VARIABLE(TSendBuffer_i_sender, i_sender);
    ((DOMessageOwner*)this)->SendBuffer(i_hash, i_data, i_sender);
    _DO_RMC_PrepareReturn();
    _DO_RMC_CompleteWrapper();
}

void _DO_DOMessageOwner::SendBufferReturnStub(RMCContext* pContext) { 
    _DO_RMC_InitReturnStub();
    _DO_RMC_DummyParam();
}

bool _DO_DOMessageOwner::CallSendFlag(RMCContext* pContext, const DDLTYPE(uint32)::CPPType& i_hash, const DDLTYPE(dohandle)::CPPType& i_sender) {
    _DO_RMC_InitCall(SendFlag);
    _MSG_ADD_VARIABLE(TSendFlag_i_hash, i_hash);
    _MSG_ADD_VARIABLE(TSendFlag_i_sender, i_sender);
    _DO_RMC_CompleteCall();
}

void _DO_DOMessageOwner::SendFlagWrapper(CallMethodOperation* pContext) { 
    _DO_RMC_InitWrapper();
    DDLTYPE(uint32)::CPPType i_hash;
    _MSG_EXTRACT_VARIABLE(TSendFlag_i_hash, i_hash);
    DDLTYPE(dohandle)::CPPType i_sender;
    _MSG_EXTRACT_VARIABLE(TSendFlag_i_sender, i_sender);
    ((DOMessageOwner*)this)->SendFlag(i_hash, i_sender);
    _DO_RMC_PrepareReturn();
    _DO_RMC_CompleteWrapper();
}

void _DO_DOMessageOwner::SendFlagReturnStub(RMCContext* pContext) { 
    _DO_RMC_InitReturnStub();
    _DO_RMC_DummyParam();
}
END_NAMESPACE_QUAZAL;
