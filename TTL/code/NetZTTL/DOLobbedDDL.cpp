// DO NOT MODIFY THIS FILE, IT HAS BEEN GENERATED.
// File generated by Quazal DDL Compiler, Version 4.1 [SP2] (Build 1224.83)
// Copyright (C) 1998-2004, Quazal Technologies Inc.

#include "TTLPCH.h"
#include <NetZ.h>
#include "NetZTTL/DOLobbedDDL.h"
#include "NetZTTL/DOLobbed.h"
BEGIN_NAMESPACE_QUAZAL;

_DOC_ImplementSomeGeneralMethods(DOLobbed)
_PR_userdo_derived_impl(DOLobbed,DOActor);
_PR_globaldo_derived_impl(DOLobbed,DOActor);

_DOC_DOLobbed::_DOC_DOLobbed(qUnsignedInt32 uiClassID):
	DOClassTemplate<DOCLASS(DOLobbed), _DOC_DOActor>(uiClassID) {
}

bool _DOC_DOLobbed::IsAKindOf(DOClassID idDOCID) {
	if(DOCLASSID(DOLobbed) == idDOCID) return true;
	return _DOC_DOActor::IsAKindOf(idDOCID);
}
void _DOC_DOLobbed::DataSetsOperation(qUnsignedInt32 uiOp) {
	_DOC_DOActor::DataSetsOperation(uiOp);
	_DOC_RegisterProtocol(7,_PR_basic_update_protocol_protodecl( _DSDECL_DSVector ));
	_DOC_RegisterFilter(7,_PR_upon_request_filter_filterdecl( _DSDECL_DSVector ));
	_DOC_RegisterProtocol(8,_PR_basic_update_protocol_protodecl( _DSDECL_DSLobbedProps ));
	_DOC_RegisterFilter(8,_PR_constant_filterdecl( _DSDECL_DSLobbedProps ));
	_DOC_RegisterProtocol(9,_PR_basic_update_protocol_protodecl( _DSDECL_DSSixDOF ));
	typedef DeadReckoningFilter<_DSDECL_DSSixDOF,_PR_DRSixDOF_model(DSSixDOF)> Filter_DSSixDOF_DRSixDOF;
	_DOC_RegisterFilter(9,Filter_DSSixDOF_DRSixDOF);
	_DSDECL_DSVector::RegisterCounters(uiOp);
	_DSDECL_DSLobbedProps::RegisterCounters(uiOp);
	_DSDECL_DSSixDOF::RegisterCounters(uiOp);
};
qBool _DOC_DOLobbed::FormatVariableValue(const DuplicatedObject *pDO, Variable *pDataset, Variable *pVariable, NS_QUAZAL String *pstrResult) const {
	_DOC_FormatMatchingVariableValue(DOLobbed,d_acceleration);
	_DOC_FormatMatchingVariableValue(DOLobbed,d_lobbedProps);
	_DOC_FormatMatchingVariableValue(DOLobbed,d_state);
	return _DOC_DOActor::FormatVariableValue(pDO, pDataset, pVariable, pstrResult);
}

bool _DOC_DOLobbed::DispatchAction(DuplicatedObject* pDO, MethodID idMethod, Message* pMsg) {
	return _DOC_DOActor::DispatchAction(pDO, idMethod, pMsg);
}

bool _DOC_DOLobbed::DispatchRMCCall(CallMethodOperation* pContext) {
	return _DOC_DOActor::DispatchRMCCall(pContext);
}

bool _DOC_DOLobbed::DispatchRMCResult(RMCContext* pContext) {
	return _DOC_DOActor::DispatchRMCResult(pContext);
}


void _DOC_DOLobbed::FillDupSpacesInfo(DupSpace::Role eRole, DupSpace::ID* pArray, qUnsignedInt* puiIndex) {
	_DOC_DOActor::FillDupSpacesInfo(eRole, pArray, puiIndex);
}


_DO_DOLobbed::_DO_DOLobbed()  {_DO_InitDO(DOLobbed);}

_DO_ImplementSomeGeneralMethods(DOLobbed);



void _DO_DOLobbed::RegisterDatasets() {
	_DO_RegisterDataset(d_acceleration);
	_DO_RegisterDataset(d_lobbedProps);
	_DO_RegisterDataset(d_state);
}

void _DO_DOLobbed::SpecificAddDSToDiscoveryMessage(Message* pMsg, Station* pStation) {
	_DO_DSAddToDiscovery(d_acceleration,pStation,7);
	_DO_DSAddToDiscovery(d_lobbedProps,pStation,8);
	_DO_DSAddToDiscovery(d_state,pStation,9);
	DOActor::SpecificAddDSToDiscoveryMessage(pMsg, pStation);
}

void _DO_DOLobbed::SpecificExtractDSFromDiscoveryMessage(Message* pMsg) {
	_DO_DSExtractFromDiscovery(d_acceleration,7);
	_DO_DSExtractFromDiscovery(d_lobbedProps,8);
	_DO_DSExtractFromDiscovery(d_state,9);
	DOActor::SpecificExtractDSFromDiscoveryMessage(pMsg);
}

void _DO_DOLobbed::CallOperationOnDatasets(DOOperation* pOperation, Operation::Event eEvent) {
	_DO_CallOperationOnDataset(d_acceleration,7);
	_DO_CallOperationOnDataset(d_lobbedProps,8);
	_DO_CallOperationOnDataset(d_state,9);
	DOActor::CallOperationOnDatasets(pOperation,eEvent);
}

bool _DO_DOLobbed::SpecificUpdate(DataSet *pDataset, const Time& tUpdateTime) {
	_DO_DatasetUpdate(d_acceleration,7);
	_DO_DatasetUpdate(d_lobbedProps,8);
	_DO_DatasetUpdate(d_state,9);
	return DOActor::SpecificUpdate(pDataset, tUpdateTime);
}

bool _DO_DOLobbed::SpecificRefresh(DataSet *pDataset, const Time& tRefreshTime) {
	_DO_DataSetRefresh(d_acceleration);
	_DO_DataSetRefresh(d_lobbedProps);
	_DO_DataSetRefresh(d_state);
	return DOActor::SpecificRefresh(pDataset, tRefreshTime);
}

bool _DO_DOLobbed::SpecificExtractADataset(Message* pMsg, qByte byDatasetIndex) { 

	switch (byDatasetIndex) {
		_DO_DSExtract(d_acceleration,7);
		_DO_DSExtract(d_lobbedProps,8);
		_DO_DSExtract(d_state,9);
	}
	return DOActor::SpecificExtractADataset(pMsg, byDatasetIndex);
}

END_NAMESPACE_QUAZAL;
