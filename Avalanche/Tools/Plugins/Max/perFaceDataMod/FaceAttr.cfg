#	AUTHOR:	Bryan Safarik
#	DATE:	Sometime in 2001...
#
#	This file contains information on how an object attribute configuration
#	file should be formatted.  It also contains sample data which is formatted
#	correctly, and can be used as an example when running the Object Attribute
#	plugin.
#	IMPORTANT: For now, all object attribute configuration files should be put
#	in the "3dsmax4\plugcfg" folder.
#
#------------------------------------------------------------------------------
#
#	DEFAULT_SELECTION "NAME" = {...}
#
#	EXAMPLE:	DEFAULT_SELECTION "rabbit|Rabbit" = {...}
#
#------------------------------------------------------------------------------
#
#	SELECTION "NAME" = {...}
#
#	EXAMPLE:	SELECTION "ford|Ford" = {...}
#
#	NOTE: The order that the default selection and selections appear in the
#	configuration file is the order they will appear in the user interface.
#	This becomes important for things such as radio groups.
#
#------------------------------------------------------------------------------
#
#	"NAME"  ---->  IDENTIFIER[|Visual Name]
#
#	EXAMPLE:	"fun_factor|Fun factor:"
#		
#	NOTE: The IDENTIFIER identifies the key internally in memory during
#	runtime, whereas the Visual Name is the label that is displayed to the
#	3dsMax user in the user interface.  If no Visual Name is supplied, then the
#	IDENTIFIER is used both as the key and the label.
#
#------------------------------------------------------------------------------
#
#	COMBO_BOX "NAME" = {
#		DEFAULT_SELECTION "NAME" = {...}
#		SELECTION "NAME" = {...}
#		EXCLUSIVE = 0 or 1 	# 1 for yes, 0 for no (default is 1), optional
#		NONUI = 0 or 1		# 1 for yes, 0 for no (default is 0), optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	COMBO_BOX "truck_brand|Brand of truck" = {
#					DEFAULT_SELECTION "chevy|Chevy" = {...}
#					SELECTION "ford|Ford" = {...}
#					SELECTION "dodge|Dodge" = {...}
#					SELECTION "toyota|Toyota" = {...}
#					SELECTION "gmc|GMC" = {...}
#				}
#
#	NOTE: Make sure that the combo box has one DEFAULT_SELECTION.  There can
#	be zero or more SELECTIONs.  EXCLUSIVE is used to control whether or not
#	the children controls of each item in the combo box are ultimately saved
#	out in the final dbl file, or if just the children of the currently
#	selected item in the combo box makes it to the dbl file.  If EXCLUSIVE is
#	set to 1, then only the children of the current selection in the combo box
#	are ultimately saved out into the final dbl file.  If set to 0 then all the
#	children are saved out.  The EXCLUSIVE flag is a way for the user to be
#	able to use a combo box to go through a bunch of different sets of
#	attributes, setting them up as he wants knowing that they will all be
#	saved out.  This is a bit confusing, so see me if you have a question.
#	If you are unsure, then you probably want your combo box to work in a
#	"normal" fashion where all the selection items are mutually exclusive of
#	one another, so set EXCLUSIVE to 1.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	RADIO_GROUP "NAME" = {
#		DEFAULT_SELECTION "NAME" = {...}
#		SELECTION "NAME" = {...}
#		EXCLUSIVE = 0 or 1 	# 1 for yes, 0 for no (default is 1), optional
#		NONUI = 0 or 1		# 1 for yes, 0 for no (default is 0), optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	RADIO_GROUP "ai_smarts|AI intelligence" = {
#					SELECTION "high|High" = {...}
#					DEFAULT_SELECTION "medium|Medium" = {...}
#					SELECTION "low|Low" = {...}
#				}
#
#	NOTE: The NAMEs for the individual selections within the radio group are
#	used to label each radio button.  Make sure there is one default
#	selection and at least one other selection to choose from.
#	
#	EXCLUSIVE is used to control whether or not the children controls of 
#	each item in the radio group are ultimately saved out in the final dbl file, 
#	or if just the children of the currently selected item in the radio group
#	makes it to the dbl file.  If EXCLUSIVE is set to 1, then only the children 
#	of the current selection in the radio group are ultimately saved out into the 
#	final dbl file.  If set to 0 then all the children are saved out.  The 
#	EXCLUSIVE flag is a way for the user to be able to use a radio group to go 
#	through a bunch of different sets of attributes, setting them up as he wants 
#	knowing that they will all be saved out.  This is a bit confusing, so see me 
#	if you have a question. If you are unsure, then you probably want your radio 
#	group to work in a "normal" fashion where all the selection items are mutually 
#	exclusive of one another, so set EXCLUSIVE to 1.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	CHECK_BOX "NAME" = {
#		DEFAULT_SELECTION "NAME" = {...}
#		SELECTION "NAME" = {...}
#		EXCLUSIVE = 0 or 1 	# 1 for yes, 0 for no (default is 1), optional
#		NONUI = 0 or 1		# 1 for yes, 0 for no (default is 0), optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	CHECK_BOX "can_collide|Can collide" = {
#					DEFAULT_SELECTION "False" = {}
#					SELECTION "True" = {...}
#				}
#
#	NOTE: There needs to be one default selection and one selection.  One of
#	the identifiers has to be False, and the other one True, it doesn't matter
#	which.
#
#	NOTE: EXCLUSIVE is used to control whether or not the children controls of 
#	each item in the check box are ultimately saved out in the final dbl file, 
#	or if just the children of the currently selected item in the radio group
#	makes it to the dbl file.  If EXCLUSIVE is set to 1, then only the children 
#	of the current selection in the check box are ultimately saved out into the 
#	final dbl file.  If set to 0 then all the children are saved out.  The 
#	EXCLUSIVE flag is a way for the user to be able to use a check box to go 
#	through a bunch of different sets of attributes, setting them up as he wants 
#	knowing that they will all be saved out.  This is a bit confusing, so see me 
#	if you have a question. If you are unsure, then you probably want your check 
#	box to work in a "normal" fashion where all the selection items are mutually 
#	exclusive of one another, so set EXCLUSIVE to 1.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	EDIT_BOX "NAME" = {
#		DEFAULT_TEXT = "..."				# optional, default is ""
#		TYPE = "string" or "filename" or
#			   "directory" or "objectname"	# optional, default is "string"
#		NONUI = 0 or 1						# 1 for yes, 0 for no (default is 0),
#											# optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	EDIT_BOX "object_to_follow|Object to follow" = {
#					DEFAULT_TEXT = ""
#					TYPE = "objectname"
#				}
#
#	NOTE: If TYPE is filename or directory, a browse button will appear to the
#	right of the edit box, which when clicked on will bring up a file browsing
#	dialog.  In the case of TYPE being objectname, the button, when clicked on,
#	will allow the user to then select an object in the scene.  The selected
#	object's name will then be put in the edit box.  If the type is string, the
#	edit box works as a normal edit box.  If DEFAULT_TEXT is not present, then
#	the edit box will be empty when displayed.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	As of April 9th, 2002, only TYPE = "string" is supported.  I will update
#	this comment when the other types are supported.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	NUMERIC "NAME" = {
#		TYPE = "int" or "float"	# Type of numeric value
#		MIN = xx.x				# Can be any number - Needs to be less than MAX
#		MAX = xx.x				# Can be any number - Needs to be more than MIN
#		DEFAULT = xx.x			# Needs to be between MIN and MAX
#		FORMAT = "x.x"			# Ex: 4.2 means 4 digits before decimal, 2 after,
#								# optional, default is defined by Max.
#		TICK_STEP = x			# Represents number of segments in the slider,
#								# optional, default is 10.
#		HAS_EDIT = 0 or 1		# 1 for yes, 0 for no (default is 1), optional
#		HAS_SPINNER = 0 or 1	# 1 for yes, 0 for no (default is 1), optional
#		HAS_SLIDER = 0 or 1		# 1 for yes, 0 for no (default is 0), optional
#		NONUI = 0 or 1			# 1 for yes, 0 for no (default is 0), optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	NUMERIC "magnetic_force|Magnetic force" = {
#					TYPE = "float"
#					MIN = 0.0
#					MAX = 1.0
#					DEFAULT = 0.5
#					FORMAT = "1.3"
#					TICK_STEP = 10
#					HAS_EDIT = 1
#					HAS_SPINNER = 1
#					HAS_SLIDER = 1
#					ADDED_INDENT = 1
#				}
#
#	NOTE: If TYPE is int, then any decimal portions within MIN, MAX, FORMAT,
#	and DEFAULT are ignored.
#	TICK_STEP represents the number of segments that the slider should be
#	divided up into.  The segments are shown via tick-marks above the slider.
#	If HAS_SLIDER is 0, then TICK_STEP is ignored.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	As of April 9th, 2002, FORMAT is ignored.  In addition, HAS_EDIT and
#	HAS_SPINNER are ignored, and all numerics are forced to have an edit and
#	a spinner.  Once these are supported, I will update this comment.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	FREE_COLOR_BOX "NAME" = {
#		DEFAULT_COLOR = [xxx, xxx, xxx]
#		NONUI = 0 or 1			# 1 for yes, 0 for no (default is 0), optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	FREE_COLOR_BOX "vehicle_color|Vehicle color" = {
#					DEFAULT_COLOR = [0, 200, 20]
#				}
#
#	NOTE: A FREE_COLOR_BOX is used to create one color swatch control.  When
#	clicked on, the color picker will come up allowing the user to choose their
#	color (Hence the name FREE).  The order within DEFAULT_COLOR is r, g, b,
#	with each ranging between 0 and 255.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	SET_COLOR_BOX "NAME" = {
#		DEFAULT_COLOR "NAME" = [xxx, xxx, xxx]
#		COLOR "NAME" = [xxx, xxx, xxx]
#		NONUI = 0 or 1			# 1 for yes, 0 for no (default is 0), optional
#		ADDED_INDENT = x
#	}
#
#	EXAMPLE:	SET_COLOR_BOX "color|Color" = {
#					DEFAULT_COLOR "Blue" = [10, 10, 200]
#					COLOR "Aqua" = [10, 195, 152]
#					COLOR "Orange" = [254, 198, 116]
#				}
#
#	NOTE: A SET_COLOR_BOX is used to create one or more color swatches for the
#	user to choose from.  The user cannot change the colors within the
#	swatches, they can only choose from the colors provided (Hence the name
#	SET).  The order within the colors is r, g, b, with each ranging between
#	0 and 255.  There can be any number of colors within a SET_COLOR_BOX, but
#	there needs to be at least one DEFAULT_COLOR.
#
#	The NONUI setting determines if this control and its children will be 
#	drawn in the user interface - Set to 1 to disable.
#
#	The ADDED_INDENT setting is used to indent a control by an additional
#	amount.  This value needs to be an integer.  This value is added to the
#	indent level of the control in the config tree, and is scaled by a pixel
#	value in the code.  For example, if the indent level of the control in the
#	tree is 2, the ADDED_INDENT level is 1, and let's say the pixel scalar is
#	20, then the control will be indented (2+1) * 20 = 60 pixels. 
#
#------------------------------------------------------------------------------
#
#	SET_ENTRY "NAME" = 
#	{
#		Child controls ...
#	}
#
#	EXAMPLE:	SET_ENTRY "OBBValue" =
#				{
#					NUMERIC "OBBValue|OBB Value:" = 
#					{
#						TYPE = "int"
#						MIN = 0
#						MAX = 30
#						DEFAULT = 0
#						FORMAT = "2.0"
#						TICK_STEP = 5
#						HAS_EDIT = 1
#						HAS_SLIDER = 1
#					}
#				}
#
#	NOTE: A SET_ENTRY is used for defining a set of controls that may be
#	referenced more than once.  To reference a SET_ENTRY use the SET_REFERENCE
#	command.  The name of the entry is the name that the SET_REFERENCE needs
#	to use in order to attach this set to the proper location within the tree.
#	SET_ENTRIES are required to not be children and must be specified at the top
#	level of the file.  They do not need to be in any order or be specified prior
#	to the reference.
#------------------------------------------------------------------------------
#
#	SET_REFERENCE = "NAME"
#
#	EXAMPLE:	SET_REFERENCE = "OBBValue"
#
#	NOTE: A SET_REFERENCE is used for using a set of controls more than once.
#	The name of the string specifies the SET_ENTRY to use.  The reference may
#	appear before or after the SET_ENTRY within the file.  SET_REFERENCE commands
#	may only appear where a startard control may appear.  A SET_REFERENCE may not
#	be a child of a NUMERIC for example.
#------------------------------------------------------------------------------
#
#	OVERRIDES
#
#	There are 3 commands that can be used to override a default, label or nonui
#	flag of any control nested below the command.  This way a SET_REFERENCE
#	command may be customized by preceeding it with a series of override commands
#	The commands are as follows:
#
#	OVERRIDE_DEFAULT "keyname" = "value"
#	OVERRIDE_LABEL "keyname" = "new label"
#	OVERRIDE_NONUI "keyname" = "0" or "1"
#	
#	Note: All three of these commands require that the value following the "="
#	need to be contained within quotes.
#
#	EXAMPLES:
#
#	OVERRIDE_DEFAULT "OBBValue" = "3" # numeric value
#	OVERRIDE_DEFAULT "override_color" = "128,255,128,light green" # color
#	OVERRIDE_DEFAULT "SurfaceType" = "Ice" # combo selection
#	OVERRIDE_NONUI "ai_parameter4_type" = "1" # make a combo box a nonui control
#	OVERRIDE_LABEL "ai_parameter1_value" = "Max activation radius squared:"
#------------------------------------------------------------------------------


COMBO_BOX "material|Material:" = {
	DEFAULT_SELECTION "None" = {}
	SELECTION "Wood" = {}
	SELECTION "Metal" = {}
	SELECTION "Stone" = {}
	SELECTION "Cloth" = {}
	SELECTION "Liquid" = {}
	SELECTION "Special F/X" = {
		RADIO_GROUP "sfx_type|Special F/X Type:" = {
			DEFAULT_SELECTION "None" = {}
			SELECTION "Glow" = {
				NUMERIC "glowPower|Glow Intensity:" = {
					TYPE = "int"
					MIN = 0
					MAX = 1000
					DEFAULT = 0
					FORMAT = "4.0"
					TICK_STEP = 10
					HAS_EDIT = 1
					HAS_SLIDER = 1
				}
				FREE_COLOR_BOX "glow_color|Glow Color:" = {
					DEFAULT_COLOR = [255 128 0]
				}
				SET_COLOR_BOX "primary_color|Primary color:" = {
					DEFAULT_COLOR "Brown" = [63 50 27]
					COLOR "Tan" = [212 196 151]
					COLOR "Gray" = [118 124 120]
					COLOR "Green" = [52 84 44]
					COLOR "Steel" = [45 58 77]
					COLOR "Blue" = [48 38 84]
					COLOR "Tan" = [212 196 151]
					COLOR "Gray" = [118 124 120]
					COLOR "Green" = [52 84 44]
					COLOR "Steel" = [45 58 77]
					COLOR "Blue" = [48 38 84]
					COLOR "Tan" = [212 196 151]
					COLOR "Gray" = [118 124 120]
					COLOR "Green" = [52 84 44]
					COLOR "Steel" = [45 58 77]
					COLOR "Blue" = [48 38 84]
				}
			}
			SELECTION "Particle Emitter" = {
				NUMERIC "emitRate|Particle Rate:" = {
					TYPE = "float"
					MIN = 0.0
					MAX = 1000.0
					DEFAULT = 0.0
					FORMAT = "4.1"
					TICK_STEP = 10
					HAS_EDIT = 1
					HAS_SLIDER = 1
				}
			}
		}
	}
}
COMBO_BOX "peristent_attr|Persistent Attributes:" = {
	DEFAULT_SELECTION "None" = {}
	SELECTION "AI Attributes" = {}
	SELECTION "Environmental Attributes" = {}
	SELECTION "Script Attributes" = {}
	EXCLUSIVE = 0
}





